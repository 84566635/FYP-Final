
FYP Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e8  20000004  08003c60  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001ec  08003c60  000201ec  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015846  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b51  00000000  00000000  00035872  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e48  00000000  00000000  000383c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d10  00000000  00000000  00039210  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000070d6  00000000  00000000  00039f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003fb5  00000000  00000000  00040ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00044fab  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000324c  00000000  00000000  00045028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b0c 	.word	0x08003b0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003b0c 	.word	0x08003b0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f003 f827 	bl	8003288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 fca0 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8f0 	bl	8000448 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8c3 	bl	80003fc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000024 	.word	0x20000024

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000024 	.word	0x20000024

080002ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	1dfb      	adds	r3, r7, #7
 80002b6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <NVIC_EnableIRQ+0x28>)
 80002ba:	1dfa      	adds	r2, r7, #7
 80002bc:	7812      	ldrb	r2, [r2, #0]
 80002be:	0011      	movs	r1, r2
 80002c0:	221f      	movs	r2, #31
 80002c2:	400a      	ands	r2, r1
 80002c4:	2101      	movs	r1, #1
 80002c6:	4091      	lsls	r1, r2
 80002c8:	000a      	movs	r2, r1
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	e000e100 	.word	0xe000e100

080002d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d8:	b5b0      	push	{r4, r5, r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	0002      	movs	r2, r0
 80002e0:	6039      	str	r1, [r7, #0]
 80002e2:	1dfb      	adds	r3, r7, #7
 80002e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b7f      	cmp	r3, #127	; 0x7f
 80002ec:	d932      	bls.n	8000354 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ee:	4c2f      	ldr	r4, [pc, #188]	; (80003ac <NVIC_SetPriority+0xd4>)
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	001a      	movs	r2, r3
 80002f6:	230f      	movs	r3, #15
 80002f8:	4013      	ands	r3, r2
 80002fa:	3b08      	subs	r3, #8
 80002fc:	0899      	lsrs	r1, r3, #2
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	0018      	movs	r0, r3
 8000306:	230f      	movs	r3, #15
 8000308:	4003      	ands	r3, r0
 800030a:	3b08      	subs	r3, #8
 800030c:	089b      	lsrs	r3, r3, #2
 800030e:	3306      	adds	r3, #6
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	3304      	adds	r3, #4
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	1dfa      	adds	r2, r7, #7
 800031a:	7812      	ldrb	r2, [r2, #0]
 800031c:	0010      	movs	r0, r2
 800031e:	2203      	movs	r2, #3
 8000320:	4002      	ands	r2, r0
 8000322:	00d2      	lsls	r2, r2, #3
 8000324:	20ff      	movs	r0, #255	; 0xff
 8000326:	4090      	lsls	r0, r2
 8000328:	0002      	movs	r2, r0
 800032a:	43d2      	mvns	r2, r2
 800032c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	019b      	lsls	r3, r3, #6
 8000332:	20ff      	movs	r0, #255	; 0xff
 8000334:	4018      	ands	r0, r3
 8000336:	1dfb      	adds	r3, r7, #7
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	001d      	movs	r5, r3
 800033c:	2303      	movs	r3, #3
 800033e:	402b      	ands	r3, r5
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	4098      	lsls	r0, r3
 8000344:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	431a      	orrs	r2, r3
 8000348:	1d8b      	adds	r3, r1, #6
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	18e3      	adds	r3, r4, r3
 800034e:	3304      	adds	r3, #4
 8000350:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000352:	e027      	b.n	80003a4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000354:	4c16      	ldr	r4, [pc, #88]	; (80003b0 <NVIC_SetPriority+0xd8>)
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b25b      	sxtb	r3, r3
 800035c:	089b      	lsrs	r3, r3, #2
 800035e:	4914      	ldr	r1, [pc, #80]	; (80003b0 <NVIC_SetPriority+0xd8>)
 8000360:	1dfa      	adds	r2, r7, #7
 8000362:	7812      	ldrb	r2, [r2, #0]
 8000364:	b252      	sxtb	r2, r2
 8000366:	0892      	lsrs	r2, r2, #2
 8000368:	32c0      	adds	r2, #192	; 0xc0
 800036a:	0092      	lsls	r2, r2, #2
 800036c:	5852      	ldr	r2, [r2, r1]
 800036e:	1df9      	adds	r1, r7, #7
 8000370:	7809      	ldrb	r1, [r1, #0]
 8000372:	0008      	movs	r0, r1
 8000374:	2103      	movs	r1, #3
 8000376:	4001      	ands	r1, r0
 8000378:	00c9      	lsls	r1, r1, #3
 800037a:	20ff      	movs	r0, #255	; 0xff
 800037c:	4088      	lsls	r0, r1
 800037e:	0001      	movs	r1, r0
 8000380:	43c9      	mvns	r1, r1
 8000382:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	0192      	lsls	r2, r2, #6
 8000388:	20ff      	movs	r0, #255	; 0xff
 800038a:	4010      	ands	r0, r2
 800038c:	1dfa      	adds	r2, r7, #7
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	0015      	movs	r5, r2
 8000392:	2203      	movs	r2, #3
 8000394:	402a      	ands	r2, r5
 8000396:	00d2      	lsls	r2, r2, #3
 8000398:	4090      	lsls	r0, r2
 800039a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800039c:	430a      	orrs	r2, r1
 800039e:	33c0      	adds	r3, #192	; 0xc0
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	511a      	str	r2, [r3, r4]
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b002      	add	sp, #8
 80003aa:	bdb0      	pop	{r4, r5, r7, pc}
 80003ac:	e000ed00 	.word	0xe000ed00
 80003b0:	e000e100 	.word	0xe000e100

080003b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <SysTick_Config+0x40>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d901      	bls.n	80003ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003c6:	2301      	movs	r3, #1
 80003c8:	e010      	b.n	80003ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <SysTick_Config+0x44>)
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	3a01      	subs	r2, #1
 80003d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d2:	2301      	movs	r3, #1
 80003d4:	425b      	negs	r3, r3
 80003d6:	2103      	movs	r1, #3
 80003d8:	0018      	movs	r0, r3
 80003da:	f7ff ff7d 	bl	80002d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <SysTick_Config+0x44>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <SysTick_Config+0x44>)
 80003e6:	2207      	movs	r2, #7
 80003e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	0018      	movs	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b002      	add	sp, #8
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	00ffffff 	.word	0x00ffffff
 80003f8:	e000e010 	.word	0xe000e010

080003fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	230f      	movs	r3, #15
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	1c02      	adds	r2, r0, #0
 800040c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	230f      	movs	r3, #15
 8000412:	18fb      	adds	r3, r7, r3
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b25b      	sxtb	r3, r3
 8000418:	0011      	movs	r1, r2
 800041a:	0018      	movs	r0, r3
 800041c:	f7ff ff5c 	bl	80002d8 <NVIC_SetPriority>
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b004      	add	sp, #16
 8000426:	bd80      	pop	{r7, pc}

08000428 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	0002      	movs	r2, r0
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	b25b      	sxtb	r3, r3
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff ff36 	bl	80002ac <NVIC_EnableIRQ>
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b002      	add	sp, #8
 8000446:	bd80      	pop	{r7, pc}

08000448 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff ffae 	bl	80003b4 <SysTick_Config>
 8000458:	0003      	movs	r3, r0
}
 800045a:	0018      	movs	r0, r3
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b04      	cmp	r3, #4
 8000470:	d106      	bne.n	8000480 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000474:	4a07      	ldr	r2, [pc, #28]	; (8000494 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000476:	6812      	ldr	r2, [r2, #0]
 8000478:	2104      	movs	r1, #4
 800047a:	430a      	orrs	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800047e:	e005      	b.n	800048c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000482:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000484:	6812      	ldr	r2, [r2, #0]
 8000486:	2104      	movs	r1, #4
 8000488:	438a      	bics	r2, r1
 800048a:	601a      	str	r2, [r3, #0]
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}
 8000494:	e000e010 	.word	0xe000e010

08000498 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800049c:	f000 f803 	bl	80004a6 <HAL_SYSTICK_Callback>
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d101      	bne.n	80004c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80004c2:	2301      	movs	r3, #1
 80004c4:	e042      	b.n	800054c <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2221      	movs	r2, #33	; 0x21
 80004ca:	2102      	movs	r1, #2
 80004cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <HAL_DMA_Init+0xa4>)
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80004e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	4313      	orrs	r3, r2
 800050a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	0018      	movs	r0, r3
 8000518:	f000 f906 	bl	8000728 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2200      	movs	r2, #0
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2200      	movs	r2, #0
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2221      	movs	r2, #33	; 0x21
 800053e:	2101      	movs	r1, #1
 8000540:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2220      	movs	r2, #32
 8000546:	2100      	movs	r1, #0
 8000548:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800054a:	2300      	movs	r3, #0
}  
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b004      	add	sp, #16
 8000552:	bd80      	pop	{r7, pc}
 8000554:	ffffc00f 	.word	0xffffc00f

08000558 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000560:	230f      	movs	r3, #15
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2221      	movs	r2, #33	; 0x21
 800056c:	5c9b      	ldrb	r3, [r3, r2]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b02      	cmp	r3, #2
 8000572:	d007      	beq.n	8000584 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2204      	movs	r2, #4
 8000578:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800057a:	230f      	movs	r3, #15
 800057c:	18fb      	adds	r3, r7, r3
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	e028      	b.n	80005d6 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	6812      	ldr	r2, [r2, #0]
 800058c:	6812      	ldr	r2, [r2, #0]
 800058e:	210e      	movs	r1, #14
 8000590:	438a      	bics	r2, r1
 8000592:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	6812      	ldr	r2, [r2, #0]
 800059e:	2101      	movs	r1, #1
 80005a0:	438a      	bics	r2, r1
 80005a2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005ac:	2101      	movs	r1, #1
 80005ae:	4091      	lsls	r1, r2
 80005b0:	000a      	movs	r2, r1
 80005b2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2221      	movs	r2, #33	; 0x21
 80005b8:	2101      	movs	r1, #1
 80005ba:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2220      	movs	r2, #32
 80005c0:	2100      	movs	r1, #0
 80005c2:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d004      	beq.n	80005d6 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	0010      	movs	r0, r2
 80005d4:	4798      	blx	r3
    } 
  }
  return status;
 80005d6:	230f      	movs	r3, #15
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	781b      	ldrb	r3, [r3, #0]
}
 80005dc:	0018      	movs	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	b004      	add	sp, #16
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	2204      	movs	r2, #4
 8000602:	409a      	lsls	r2, r3
 8000604:	0013      	movs	r3, r2
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	4013      	ands	r3, r2
 800060a:	d024      	beq.n	8000656 <HAL_DMA_IRQHandler+0x72>
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	2204      	movs	r2, #4
 8000610:	4013      	ands	r3, r2
 8000612:	d020      	beq.n	8000656 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2220      	movs	r2, #32
 800061c:	4013      	ands	r3, r2
 800061e:	d107      	bne.n	8000630 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	6812      	ldr	r2, [r2, #0]
 8000628:	6812      	ldr	r2, [r2, #0]
 800062a:	2104      	movs	r1, #4
 800062c:	438a      	bics	r2, r1
 800062e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000638:	2104      	movs	r1, #4
 800063a:	4091      	lsls	r1, r2
 800063c:	000a      	movs	r2, r1
 800063e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000644:	2b00      	cmp	r3, #0
 8000646:	d100      	bne.n	800064a <HAL_DMA_IRQHandler+0x66>
 8000648:	e06a      	b.n	8000720 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	0010      	movs	r0, r2
 8000652:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000654:	e064      	b.n	8000720 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	2202      	movs	r2, #2
 800065c:	409a      	lsls	r2, r3
 800065e:	0013      	movs	r3, r2
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	4013      	ands	r3, r2
 8000664:	d02b      	beq.n	80006be <HAL_DMA_IRQHandler+0xda>
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	2202      	movs	r2, #2
 800066a:	4013      	ands	r3, r2
 800066c:	d027      	beq.n	80006be <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2220      	movs	r2, #32
 8000676:	4013      	ands	r3, r2
 8000678:	d10b      	bne.n	8000692 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	6812      	ldr	r2, [r2, #0]
 8000682:	6812      	ldr	r2, [r2, #0]
 8000684:	210a      	movs	r1, #10
 8000686:	438a      	bics	r2, r1
 8000688:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2221      	movs	r2, #33	; 0x21
 800068e:	2101      	movs	r1, #1
 8000690:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800069a:	2102      	movs	r1, #2
 800069c:	4091      	lsls	r1, r2
 800069e:	000a      	movs	r2, r1
 80006a0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2220      	movs	r2, #32
 80006a6:	2100      	movs	r1, #0
 80006a8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d036      	beq.n	8000720 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	0010      	movs	r0, r2
 80006ba:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80006bc:	e030      	b.n	8000720 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2208      	movs	r2, #8
 80006c4:	409a      	lsls	r2, r3
 80006c6:	0013      	movs	r3, r2
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	4013      	ands	r3, r2
 80006cc:	d028      	beq.n	8000720 <HAL_DMA_IRQHandler+0x13c>
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	2208      	movs	r2, #8
 80006d2:	4013      	ands	r3, r2
 80006d4:	d024      	beq.n	8000720 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	6812      	ldr	r2, [r2, #0]
 80006e0:	210e      	movs	r1, #14
 80006e2:	438a      	bics	r2, r1
 80006e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80006ee:	2101      	movs	r1, #1
 80006f0:	4091      	lsls	r1, r2
 80006f2:	000a      	movs	r2, r1
 80006f4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2221      	movs	r2, #33	; 0x21
 8000700:	2101      	movs	r1, #1
 8000702:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2220      	movs	r2, #32
 8000708:	2100      	movs	r1, #0
 800070a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	2b00      	cmp	r3, #0
 8000712:	d005      	beq.n	8000720 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	0010      	movs	r0, r2
 800071c:	4798      	blx	r3
    }
   }
}  
 800071e:	e7ff      	b.n	8000720 <HAL_DMA_IRQHandler+0x13c>
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b004      	add	sp, #16
 8000726:	bd80      	pop	{r7, pc}

08000728 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a08      	ldr	r2, [pc, #32]	; (8000758 <DMA_CalcBaseAndBitshift+0x30>)
 8000736:	4694      	mov	ip, r2
 8000738:	4463      	add	r3, ip
 800073a:	2114      	movs	r1, #20
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fce3 	bl	8000108 <__udivsi3>
 8000742:	0003      	movs	r3, r0
 8000744:	009a      	lsls	r2, r3, #2
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <DMA_CalcBaseAndBitshift+0x34>)
 800074e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}
 8000758:	bffdfff8 	.word	0xbffdfff8
 800075c:	40020000 	.word	0x40020000

08000760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000776:	e14f      	b.n	8000a18 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2101      	movs	r1, #1
 800077e:	697a      	ldr	r2, [r7, #20]
 8000780:	4091      	lsls	r1, r2
 8000782:	000a      	movs	r2, r1
 8000784:	4013      	ands	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d100      	bne.n	8000790 <HAL_GPIO_Init+0x30>
 800078e:	e140      	b.n	8000a12 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d003      	beq.n	80007a0 <HAL_GPIO_Init+0x40>
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	2b12      	cmp	r3, #18
 800079e:	d123      	bne.n	80007e8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	08da      	lsrs	r2, r3, #3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3208      	adds	r2, #8
 80007a8:	0092      	lsls	r2, r2, #2
 80007aa:	58d3      	ldr	r3, [r2, r3]
 80007ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	2207      	movs	r2, #7
 80007b2:	4013      	ands	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	220f      	movs	r2, #15
 80007b8:	409a      	lsls	r2, r3
 80007ba:	0013      	movs	r3, r2
 80007bc:	43da      	mvns	r2, r3
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	691a      	ldr	r2, [r3, #16]
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2107      	movs	r1, #7
 80007cc:	400b      	ands	r3, r1
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	409a      	lsls	r2, r3
 80007d2:	0013      	movs	r3, r2
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	08da      	lsrs	r2, r3, #3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3208      	adds	r2, #8
 80007e2:	0092      	lsls	r2, r2, #2
 80007e4:	6939      	ldr	r1, [r7, #16]
 80007e6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	2203      	movs	r2, #3
 80007f4:	409a      	lsls	r2, r3
 80007f6:	0013      	movs	r3, r2
 80007f8:	43da      	mvns	r2, r3
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	2203      	movs	r2, #3
 8000806:	401a      	ands	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	409a      	lsls	r2, r3
 800080e:	0013      	movs	r3, r2
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	4313      	orrs	r3, r2
 8000814:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d00b      	beq.n	800083c <HAL_GPIO_Init+0xdc>
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d007      	beq.n	800083c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000830:	2b11      	cmp	r3, #17
 8000832:	d003      	beq.n	800083c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	2b12      	cmp	r3, #18
 800083a:	d130      	bne.n	800089e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	2203      	movs	r2, #3
 8000848:	409a      	lsls	r2, r3
 800084a:	0013      	movs	r3, r2
 800084c:	43da      	mvns	r2, r3
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	409a      	lsls	r2, r3
 800085e:	0013      	movs	r3, r2
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4313      	orrs	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000872:	2201      	movs	r2, #1
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	409a      	lsls	r2, r3
 8000878:	0013      	movs	r3, r2
 800087a:	43da      	mvns	r2, r3
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	4013      	ands	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	091b      	lsrs	r3, r3, #4
 8000888:	2201      	movs	r2, #1
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	2203      	movs	r2, #3
 80008aa:	409a      	lsls	r2, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	43da      	mvns	r2, r3
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	4013      	ands	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	409a      	lsls	r2, r3
 80008c0:	0013      	movs	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	2380      	movs	r3, #128	; 0x80
 80008d4:	055b      	lsls	r3, r3, #21
 80008d6:	4013      	ands	r3, r2
 80008d8:	d100      	bne.n	80008dc <HAL_GPIO_Init+0x17c>
 80008da:	e09a      	b.n	8000a12 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008dc:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_GPIO_Init+0x2d0>)
 80008de:	4a54      	ldr	r2, [pc, #336]	; (8000a30 <HAL_GPIO_Init+0x2d0>)
 80008e0:	6992      	ldr	r2, [r2, #24]
 80008e2:	2101      	movs	r1, #1
 80008e4:	430a      	orrs	r2, r1
 80008e6:	619a      	str	r2, [r3, #24]
 80008e8:	4b51      	ldr	r3, [pc, #324]	; (8000a30 <HAL_GPIO_Init+0x2d0>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	2201      	movs	r2, #1
 80008ee:	4013      	ands	r3, r2
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80008f4:	4a4f      	ldr	r2, [pc, #316]	; (8000a34 <HAL_GPIO_Init+0x2d4>)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	089b      	lsrs	r3, r3, #2
 80008fa:	3302      	adds	r3, #2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	589b      	ldr	r3, [r3, r2]
 8000900:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2203      	movs	r2, #3
 8000906:	4013      	ands	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	220f      	movs	r2, #15
 800090c:	409a      	lsls	r2, r3
 800090e:	0013      	movs	r3, r2
 8000910:	43da      	mvns	r2, r3
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	429a      	cmp	r2, r3
 8000920:	d013      	beq.n	800094a <HAL_GPIO_Init+0x1ea>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a44      	ldr	r2, [pc, #272]	; (8000a38 <HAL_GPIO_Init+0x2d8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d00d      	beq.n	8000946 <HAL_GPIO_Init+0x1e6>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a43      	ldr	r2, [pc, #268]	; (8000a3c <HAL_GPIO_Init+0x2dc>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d007      	beq.n	8000942 <HAL_GPIO_Init+0x1e2>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <HAL_GPIO_Init+0x2e0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_GPIO_Init+0x1de>
 800093a:	2303      	movs	r3, #3
 800093c:	e006      	b.n	800094c <HAL_GPIO_Init+0x1ec>
 800093e:	2305      	movs	r3, #5
 8000940:	e004      	b.n	800094c <HAL_GPIO_Init+0x1ec>
 8000942:	2302      	movs	r3, #2
 8000944:	e002      	b.n	800094c <HAL_GPIO_Init+0x1ec>
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <HAL_GPIO_Init+0x1ec>
 800094a:	2300      	movs	r3, #0
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	2103      	movs	r1, #3
 8000950:	400a      	ands	r2, r1
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	4093      	lsls	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800095c:	4935      	ldr	r1, [pc, #212]	; (8000a34 <HAL_GPIO_Init+0x2d4>)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3302      	adds	r3, #2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800096a:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <HAL_GPIO_Init+0x2e4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	43da      	mvns	r2, r3
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	025b      	lsls	r3, r3, #9
 8000982:	4013      	ands	r3, r2
 8000984:	d003      	beq.n	800098e <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4313      	orrs	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <HAL_GPIO_Init+0x2e4>)
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000994:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <HAL_GPIO_Init+0x2e4>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	43da      	mvns	r2, r3
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	029b      	lsls	r3, r3, #10
 80009ac:	4013      	ands	r3, r2
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <HAL_GPIO_Init+0x2e4>)
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <HAL_GPIO_Init+0x2e4>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	43da      	mvns	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	035b      	lsls	r3, r3, #13
 80009d6:	4013      	ands	r3, r2
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_GPIO_Init+0x2e4>)
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_GPIO_Init+0x2e4>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43da      	mvns	r2, r3
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	039b      	lsls	r3, r3, #14
 8000a00:	4013      	ands	r3, r2
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_GPIO_Init+0x2e4>)
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	40da      	lsrs	r2, r3
 8000a20:	1e13      	subs	r3, r2, #0
 8000a22:	d000      	beq.n	8000a26 <HAL_GPIO_Init+0x2c6>
 8000a24:	e6a8      	b.n	8000778 <HAL_GPIO_Init+0x18>
  } 
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b006      	add	sp, #24
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010000 	.word	0x40010000
 8000a38:	48000400 	.word	0x48000400
 8000a3c:	48000800 	.word	0x48000800
 8000a40:	48000c00 	.word	0x48000c00
 8000a44:	40010400 	.word	0x40010400

08000a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	0008      	movs	r0, r1
 8000a52:	0011      	movs	r1, r2
 8000a54:	1cbb      	adds	r3, r7, #2
 8000a56:	1c02      	adds	r2, r0, #0
 8000a58:	801a      	strh	r2, [r3, #0]
 8000a5a:	1c7b      	adds	r3, r7, #1
 8000a5c:	1c0a      	adds	r2, r1, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a60:	1c7b      	adds	r3, r7, #1
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d004      	beq.n	8000a72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a68:	1cbb      	adds	r3, r7, #2
 8000a6a:	881a      	ldrh	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a70:	e003      	b.n	8000a7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a72:	1cbb      	adds	r3, r7, #2
 8000a74:	881a      	ldrh	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e081      	b.n	8000b9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2241      	movs	r2, #65	; 0x41
 8000a9a:	5c9b      	ldrb	r3, [r3, r2]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d107      	bne.n	8000ab2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2240      	movs	r2, #64	; 0x40
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	0018      	movs	r0, r3
 8000aae:	f002 fad9 	bl	8003064 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2241      	movs	r2, #65	; 0x41
 8000ab6:	2124      	movs	r1, #36	; 0x24
 8000ab8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	6812      	ldr	r2, [r2, #0]
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	438a      	bics	r2, r1
 8000ac8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	6852      	ldr	r2, [r2, #4]
 8000ad2:	4934      	ldr	r1, [pc, #208]	; (8000ba4 <HAL_I2C_Init+0x120>)
 8000ad4:	400a      	ands	r2, r1
 8000ad6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	6892      	ldr	r2, [r2, #8]
 8000ae2:	4931      	ldr	r1, [pc, #196]	; (8000ba8 <HAL_I2C_Init+0x124>)
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d108      	bne.n	8000b02 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	6892      	ldr	r2, [r2, #8]
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	0209      	lsls	r1, r1, #8
 8000afc:	430a      	orrs	r2, r1
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	e007      	b.n	8000b12 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	6892      	ldr	r2, [r2, #8]
 8000b0a:	2184      	movs	r1, #132	; 0x84
 8000b0c:	0209      	lsls	r1, r1, #8
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d104      	bne.n	8000b24 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	6852      	ldr	r2, [r2, #4]
 8000b2e:	491f      	ldr	r1, [pc, #124]	; (8000bac <HAL_I2C_Init+0x128>)
 8000b30:	430a      	orrs	r2, r1
 8000b32:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	68d2      	ldr	r2, [r2, #12]
 8000b3e:	491a      	ldr	r1, [pc, #104]	; (8000ba8 <HAL_I2C_Init+0x124>)
 8000b40:	400a      	ands	r2, r1
 8000b42:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	6911      	ldr	r1, [r2, #16]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	6952      	ldr	r2, [r2, #20]
 8000b50:	4311      	orrs	r1, r2
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	6992      	ldr	r2, [r2, #24]
 8000b56:	0212      	lsls	r2, r2, #8
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	69d1      	ldr	r1, [r2, #28]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6a12      	ldr	r2, [r2, #32]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	2101      	movs	r1, #1
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2241      	movs	r2, #65	; 0x41
 8000b86:	2120      	movs	r1, #32
 8000b88:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2242      	movs	r2, #66	; 0x42
 8000b94:	2100      	movs	r1, #0
 8000b96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	f0ffffff 	.word	0xf0ffffff
 8000ba8:	ffff7fff 	.word	0xffff7fff
 8000bac:	02008000 	.word	0x02008000

08000bb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af02      	add	r7, sp, #8
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	000c      	movs	r4, r1
 8000bba:	0010      	movs	r0, r2
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	230a      	movs	r3, #10
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	1c22      	adds	r2, r4, #0
 8000bc4:	801a      	strh	r2, [r3, #0]
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	1c02      	adds	r2, r0, #0
 8000bcc:	801a      	strh	r2, [r3, #0]
 8000bce:	1dbb      	adds	r3, r7, #6
 8000bd0:	1c0a      	adds	r2, r1, #0
 8000bd2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2241      	movs	r2, #65	; 0x41
 8000bdc:	5c9b      	ldrb	r3, [r3, r2]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b20      	cmp	r3, #32
 8000be2:	d000      	beq.n	8000be6 <HAL_I2C_Mem_Write+0x36>
 8000be4:	e11c      	b.n	8000e20 <HAL_I2C_Mem_Write+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 8000be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d004      	beq.n	8000bf6 <HAL_I2C_Mem_Write+0x46>
 8000bec:	232c      	movs	r3, #44	; 0x2c
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <HAL_I2C_Mem_Write+0x4a>
    {
      return  HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e113      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	5c9b      	ldrb	r3, [r3, r2]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d101      	bne.n	8000c08 <HAL_I2C_Mem_Write+0x58>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e10c      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2240      	movs	r2, #64	; 0x40
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c10:	f7ff fb42 	bl	8000298 <HAL_GetTick>
 8000c14:	0003      	movs	r3, r0
 8000c16:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	0219      	lsls	r1, r3, #8
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2319      	movs	r3, #25
 8000c24:	2201      	movs	r2, #1
 8000c26:	f000 f994 	bl	8000f52 <I2C_WaitOnFlagUntilTimeout>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_I2C_Mem_Write+0x82>
    {
      return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e0f7      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2241      	movs	r2, #65	; 0x41
 8000c36:	2121      	movs	r1, #33	; 0x21
 8000c38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2242      	movs	r2, #66	; 0x42
 8000c3e:	2140      	movs	r1, #64	; 0x40
 8000c40:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2200      	movs	r2, #0
 8000c46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	222c      	movs	r2, #44	; 0x2c
 8000c52:	18ba      	adds	r2, r7, r2
 8000c54:	8812      	ldrh	r2, [r2, #0]
 8000c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000c5e:	1dbb      	adds	r3, r7, #6
 8000c60:	881c      	ldrh	r4, [r3, #0]
 8000c62:	2308      	movs	r3, #8
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	230a      	movs	r3, #10
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	8819      	ldrh	r1, [r3, #0]
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	0023      	movs	r3, r4
 8000c7a:	f000 f8d9 	bl	8000e30 <I2C_RequestMemoryWrite>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d00f      	beq.n	8000ca2 <HAL_I2C_Mem_Write+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d105      	bne.n	8000c96 <HAL_I2C_Mem_Write+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2240      	movs	r2, #64	; 0x40
 8000c8e:	2100      	movs	r1, #0
 8000c90:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e0c5      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2240      	movs	r2, #64	; 0x40
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e0bf      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	2bff      	cmp	r3, #255	; 0xff
 8000caa:	d911      	bls.n	8000cd0 <HAL_I2C_Mem_Write+0x120>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	045c      	lsls	r4, r3, #17
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	8819      	ldrh	r1, [r3, #0]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	0023      	movs	r3, r4
 8000cca:	f000 fa55 	bl	8001178 <I2C_TransferConfig>
 8000cce:	e012      	b.n	8000cf6 <HAL_I2C_Mem_Write+0x146>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	049c      	lsls	r4, r3, #18
 8000ce4:	230a      	movs	r3, #10
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	8819      	ldrh	r1, [r3, #0]
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	2300      	movs	r3, #0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	0023      	movs	r3, r4
 8000cf2:	f000 fa41 	bl	8001178 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 f961 	bl	8000fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d007      	beq.n	8000d16 <HAL_I2C_Mem_Write+0x166>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d101      	bne.n	8000d12 <HAL_I2C_Mem_Write+0x162>
        {
          return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e087      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
        }
        else
        {
          return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e085      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d1e:	1c50      	adds	r0, r2, #1
 8000d20:	68f9      	ldr	r1, [r7, #12]
 8000d22:	6248      	str	r0, [r1, #36]	; 0x24
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d13b      	bne.n	8000dc2 <HAL_I2C_Mem_Write+0x212>
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d036      	beq.n	8000dc2 <HAL_I2C_Mem_Write+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	f000 f8f6 	bl	8000f52 <I2C_WaitOnFlagUntilTimeout>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_I2C_Mem_Write+0x1be>
        {
          return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e059      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	2bff      	cmp	r3, #255	; 0xff
 8000d76:	d911      	bls.n	8000d9c <HAL_I2C_Mem_Write+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	22ff      	movs	r2, #255	; 0xff
 8000d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	045c      	lsls	r4, r3, #17
 8000d88:	230a      	movs	r3, #10
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	8819      	ldrh	r1, [r3, #0]
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	2300      	movs	r3, #0
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	0023      	movs	r3, r4
 8000d96:	f000 f9ef 	bl	8001178 <I2C_TransferConfig>
 8000d9a:	e012      	b.n	8000dc2 <HAL_I2C_Mem_Write+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	049c      	lsls	r4, r3, #18
 8000db0:	230a      	movs	r3, #10
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	8819      	ldrh	r1, [r3, #0]
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	2300      	movs	r3, #0
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	0023      	movs	r3, r4
 8000dbe:	f000 f9db 	bl	8001178 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d194      	bne.n	8000cf6 <HAL_I2C_Mem_Write+0x146>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 f935 	bl	8001042 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d007      	beq.n	8000dec <HAL_I2C_Mem_Write+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d101      	bne.n	8000de8 <HAL_I2C_Mem_Write+0x238>
      {
        return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e01c      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e01a      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2220      	movs	r2, #32
 8000df2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	6812      	ldr	r2, [r2, #0]
 8000dfc:	6852      	ldr	r2, [r2, #4]
 8000dfe:	490b      	ldr	r1, [pc, #44]	; (8000e2c <HAL_I2C_Mem_Write+0x27c>)
 8000e00:	400a      	ands	r2, r1
 8000e02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2241      	movs	r2, #65	; 0x41
 8000e08:	2120      	movs	r1, #32
 8000e0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2242      	movs	r2, #66	; 0x42
 8000e10:	2100      	movs	r1, #0
 8000e12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	2100      	movs	r1, #0
 8000e1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e000      	b.n	8000e22 <HAL_I2C_Mem_Write+0x272>
  }
  else
  {
    return HAL_BUSY;
 8000e20:	2302      	movs	r3, #2
  }
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b007      	add	sp, #28
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	fe00e800 	.word	0xfe00e800

08000e30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	000c      	movs	r4, r1
 8000e3a:	0010      	movs	r0, r2
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	230a      	movs	r3, #10
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	1c22      	adds	r2, r4, #0
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	2308      	movs	r3, #8
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	1c02      	adds	r2, r0, #0
 8000e4c:	801a      	strh	r2, [r3, #0]
 8000e4e:	1dbb      	adds	r3, r7, #6
 8000e50:	1c0a      	adds	r2, r1, #0
 8000e52:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	045c      	lsls	r4, r3, #17
 8000e5e:	230a      	movs	r3, #10
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	8819      	ldrh	r1, [r3, #0]
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	0023      	movs	r3, r4
 8000e6e:	f000 f983 	bl	8001178 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e74:	6a39      	ldr	r1, [r7, #32]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f000 f8a3 	bl	8000fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8000e7e:	1e03      	subs	r3, r0, #0
 8000e80:	d007      	beq.n	8000e92 <I2C_RequestMemoryWrite+0x62>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d101      	bne.n	8000e8e <I2C_RequestMemoryWrite+0x5e>
    {
      return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e03b      	b.n	8000f06 <I2C_RequestMemoryWrite+0xd6>
    }
    else
    {
      return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e039      	b.n	8000f06 <I2C_RequestMemoryWrite+0xd6>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000e92:	1dbb      	adds	r3, r7, #6
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d107      	bne.n	8000eaa <I2C_RequestMemoryWrite+0x7a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	18ba      	adds	r2, r7, r2
 8000ea2:	8812      	ldrh	r2, [r2, #0]
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ea8:	e01f      	b.n	8000eea <I2C_RequestMemoryWrite+0xba>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2208      	movs	r2, #8
 8000eb0:	18ba      	adds	r2, r7, r2
 8000eb2:	8812      	ldrh	r2, [r2, #0]
 8000eb4:	0a12      	lsrs	r2, r2, #8
 8000eb6:	b292      	uxth	r2, r2
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ebe:	6a39      	ldr	r1, [r7, #32]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 f87e 	bl	8000fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d007      	beq.n	8000edc <I2C_RequestMemoryWrite+0xac>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d101      	bne.n	8000ed8 <I2C_RequestMemoryWrite+0xa8>
      {
        return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e016      	b.n	8000f06 <I2C_RequestMemoryWrite+0xd6>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e014      	b.n	8000f06 <I2C_RequestMemoryWrite+0xd6>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	18ba      	adds	r2, r7, r2
 8000ee4:	8812      	ldrh	r2, [r2, #0]
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000eea:	6a3a      	ldr	r2, [r7, #32]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	f000 f82b 	bl	8000f52 <I2C_WaitOnFlagUntilTimeout>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <I2C_RequestMemoryWrite+0xd4>
  {
    return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e000      	b.n	8000f06 <I2C_RequestMemoryWrite+0xd6>
  }

  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	0018      	movs	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b005      	add	sp, #20
 8000f0c:	bd90      	pop	{r4, r7, pc}

08000f0e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d103      	bne.n	8000f2c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d007      	beq.n	8000f4a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	6992      	ldr	r2, [r2, #24]
 8000f44:	2101      	movs	r1, #1
 8000f46:	430a      	orrs	r2, r1
 8000f48:	619a      	str	r2, [r3, #24]
  }
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f62:	e01b      	b.n	8000f9c <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	d018      	beq.n	8000f9c <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d007      	beq.n	8000f80 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000f70:	f7ff f992 	bl	8000298 <HAL_GetTick>
 8000f74:	0002      	movs	r2, r0
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	1ad2      	subs	r2, r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d90d      	bls.n	8000f9c <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2241      	movs	r2, #65	; 0x41
 8000f84:	2120      	movs	r1, #32
 8000f86:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2242      	movs	r2, #66	; 0x42
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2240      	movs	r2, #64	; 0x40
 8000f94:	2100      	movs	r1, #0
 8000f96:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e00f      	b.n	8000fbc <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	425a      	negs	r2, r3
 8000fac:	4153      	adcs	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d0d4      	beq.n	8000f64 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b004      	add	sp, #16
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000fd0:	e02b      	b.n	800102a <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 f86f 	bl	80010bc <I2C_IsAcknowledgeFailed>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d001      	beq.n	8000fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e029      	b.n	800103a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	d01e      	beq.n	800102a <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8000ff2:	f7ff f951 	bl	8000298 <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	1ad2      	subs	r2, r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d913      	bls.n	800102a <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	2220      	movs	r2, #32
 8001008:	431a      	orrs	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2241      	movs	r2, #65	; 0x41
 8001012:	2120      	movs	r1, #32
 8001014:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2242      	movs	r2, #66	; 0x42
 800101a:	2100      	movs	r1, #0
 800101c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	2100      	movs	r1, #0
 8001024:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e007      	b.n	800103a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	2202      	movs	r2, #2
 8001032:	4013      	ands	r3, r2
 8001034:	2b02      	cmp	r3, #2
 8001036:	d1cc      	bne.n	8000fd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800104e:	e028      	b.n	80010a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	0018      	movs	r0, r3
 8001058:	f000 f830 	bl	80010bc <I2C_IsAcknowledgeFailed>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d001      	beq.n	8001064 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e026      	b.n	80010b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800106a:	f7ff f915 	bl	8000298 <HAL_GetTick>
 800106e:	0002      	movs	r2, r0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1ad2      	subs	r2, r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	429a      	cmp	r2, r3
 8001078:	d913      	bls.n	80010a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	2220      	movs	r2, #32
 8001080:	431a      	orrs	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2241      	movs	r2, #65	; 0x41
 800108a:	2120      	movs	r1, #32
 800108c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2242      	movs	r2, #66	; 0x42
 8001092:	2100      	movs	r1, #0
 8001094:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2240      	movs	r2, #64	; 0x40
 800109a:	2100      	movs	r1, #0
 800109c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e007      	b.n	80010b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	2220      	movs	r2, #32
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b20      	cmp	r3, #32
 80010ae:	d1cf      	bne.n	8001050 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	2210      	movs	r2, #16
 80010d0:	4013      	ands	r3, r2
 80010d2:	2b10      	cmp	r3, #16
 80010d4:	d148      	bne.n	8001168 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010d6:	e01b      	b.n	8001110 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	3301      	adds	r3, #1
 80010dc:	d018      	beq.n	8001110 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d007      	beq.n	80010f4 <I2C_IsAcknowledgeFailed+0x38>
 80010e4:	f7ff f8d8 	bl	8000298 <HAL_GetTick>
 80010e8:	0002      	movs	r2, r0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	1ad2      	subs	r2, r2, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d90d      	bls.n	8001110 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2241      	movs	r2, #65	; 0x41
 80010f8:	2120      	movs	r1, #32
 80010fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2242      	movs	r2, #66	; 0x42
 8001100:	2100      	movs	r1, #0
 8001102:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2240      	movs	r2, #64	; 0x40
 8001108:	2100      	movs	r1, #0
 800110a:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e02c      	b.n	800116a <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2220      	movs	r2, #32
 8001118:	4013      	ands	r3, r2
 800111a:	2b20      	cmp	r3, #32
 800111c:	d1dc      	bne.n	80010d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2210      	movs	r2, #16
 8001124:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2220      	movs	r2, #32
 800112c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff feec 	bl	8000f0e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	6852      	ldr	r2, [r2, #4]
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <I2C_IsAcknowledgeFailed+0xb8>)
 8001142:	400a      	ands	r2, r1
 8001144:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2204      	movs	r2, #4
 800114a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2241      	movs	r2, #65	; 0x41
 8001150:	2120      	movs	r1, #32
 8001152:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2242      	movs	r2, #66	; 0x42
 8001158:	2100      	movs	r1, #0
 800115a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2240      	movs	r2, #64	; 0x40
 8001160:	2100      	movs	r1, #0
 8001162:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	fe00e800 	.word	0xfe00e800

08001178 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	0008      	movs	r0, r1
 8001182:	0011      	movs	r1, r2
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	230a      	movs	r3, #10
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	1c02      	adds	r2, r0, #0
 800118c:	801a      	strh	r2, [r3, #0]
 800118e:	2309      	movs	r3, #9
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	1c0a      	adds	r2, r1, #0
 8001194:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <I2C_TransferConfig+0x6c>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80011aa:	230a      	movs	r3, #10
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	059b      	lsls	r3, r3, #22
 80011b2:	0d9a      	lsrs	r2, r3, #22
 80011b4:	2309      	movs	r3, #9
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	0419      	lsls	r1, r3, #16
 80011bc:	23ff      	movs	r3, #255	; 0xff
 80011be:	041b      	lsls	r3, r3, #16
 80011c0:	400b      	ands	r3, r1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	605a      	str	r2, [r3, #4]
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b006      	add	sp, #24
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	fc009800 	.word	0xfc009800

080011e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2241      	movs	r2, #65	; 0x41
 80011f6:	5c9b      	ldrb	r3, [r3, r2]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b20      	cmp	r3, #32
 80011fc:	d138      	bne.n	8001270 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2240      	movs	r2, #64	; 0x40
 8001202:	5c9b      	ldrb	r3, [r3, r2]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001208:	2302      	movs	r3, #2
 800120a:	e032      	b.n	8001272 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2240      	movs	r2, #64	; 0x40
 8001210:	2101      	movs	r1, #1
 8001212:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2241      	movs	r2, #65	; 0x41
 8001218:	2124      	movs	r1, #36	; 0x24
 800121a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	2101      	movs	r1, #1
 8001228:	438a      	bics	r2, r1
 800122a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	4911      	ldr	r1, [pc, #68]	; (800127c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001238:	400a      	ands	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	6811      	ldr	r1, [r2, #0]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	2101      	movs	r1, #1
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2241      	movs	r2, #65	; 0x41
 8001260:	2120      	movs	r1, #32
 8001262:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2240      	movs	r2, #64	; 0x40
 8001268:	2100      	movs	r1, #0
 800126a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	e000      	b.n	8001272 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001270:	2302      	movs	r3, #2
  }
}
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	b002      	add	sp, #8
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	ffffefff 	.word	0xffffefff

08001280 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2241      	movs	r2, #65	; 0x41
 8001292:	5c9b      	ldrb	r3, [r3, r2]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b20      	cmp	r3, #32
 8001298:	d139      	bne.n	800130e <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	5c9b      	ldrb	r3, [r3, r2]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e033      	b.n	8001310 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2240      	movs	r2, #64	; 0x40
 80012ac:	2101      	movs	r1, #1
 80012ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2241      	movs	r2, #65	; 0x41
 80012b4:	2124      	movs	r1, #36	; 0x24
 80012b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	2101      	movs	r1, #1
 80012c4:	438a      	bics	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	430a      	orrs	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2241      	movs	r2, #65	; 0x41
 80012fe:	2120      	movs	r1, #32
 8001300:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2240      	movs	r2, #64	; 0x40
 8001306:	2100      	movs	r1, #0
 8001308:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 800130e:	2302      	movs	r3, #2
  }
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}
 8001318:	fffff0ff 	.word	0xfffff0ff

0800131c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	4013      	ands	r3, r2
 8001330:	d100      	bne.n	8001334 <HAL_RCC_OscConfig+0x18>
 8001332:	e08d      	b.n	8001450 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001334:	4bc3      	ldr	r3, [pc, #780]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	220c      	movs	r2, #12
 800133a:	4013      	ands	r3, r2
 800133c:	2b04      	cmp	r3, #4
 800133e:	d00e      	beq.n	800135e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001340:	4bc0      	ldr	r3, [pc, #768]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	220c      	movs	r2, #12
 8001346:	4013      	ands	r3, r2
 8001348:	2b08      	cmp	r3, #8
 800134a:	d116      	bne.n	800137a <HAL_RCC_OscConfig+0x5e>
 800134c:	4bbd      	ldr	r3, [pc, #756]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	401a      	ands	r2, r3
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	025b      	lsls	r3, r3, #9
 800135a:	429a      	cmp	r2, r3
 800135c:	d10d      	bne.n	800137a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135e:	4bb9      	ldr	r3, [pc, #740]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_RCC_OscConfig+0x50>
 800136a:	e070      	b.n	800144e <HAL_RCC_OscConfig+0x132>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d000      	beq.n	8001376 <HAL_RCC_OscConfig+0x5a>
 8001374:	e06b      	b.n	800144e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e2b5      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d107      	bne.n	8001392 <HAL_RCC_OscConfig+0x76>
 8001382:	4bb0      	ldr	r3, [pc, #704]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001384:	4aaf      	ldr	r2, [pc, #700]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	0249      	lsls	r1, r1, #9
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e02f      	b.n	80013f2 <HAL_RCC_OscConfig+0xd6>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x98>
 800139a:	4baa      	ldr	r3, [pc, #680]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 800139c:	4aa9      	ldr	r2, [pc, #676]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	49a9      	ldr	r1, [pc, #676]	; (8001648 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	400a      	ands	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	4ba7      	ldr	r3, [pc, #668]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80013a8:	4aa6      	ldr	r2, [pc, #664]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	49a7      	ldr	r1, [pc, #668]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013ae:	400a      	ands	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e01e      	b.n	80013f2 <HAL_RCC_OscConfig+0xd6>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d10e      	bne.n	80013da <HAL_RCC_OscConfig+0xbe>
 80013bc:	4ba1      	ldr	r3, [pc, #644]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80013be:	4aa1      	ldr	r2, [pc, #644]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	02c9      	lsls	r1, r1, #11
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	4b9e      	ldr	r3, [pc, #632]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80013cc:	4a9d      	ldr	r2, [pc, #628]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	0249      	lsls	r1, r1, #9
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e00b      	b.n	80013f2 <HAL_RCC_OscConfig+0xd6>
 80013da:	4b9a      	ldr	r3, [pc, #616]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80013dc:	4a99      	ldr	r2, [pc, #612]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	4999      	ldr	r1, [pc, #612]	; (8001648 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	400a      	ands	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	4b97      	ldr	r3, [pc, #604]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80013e8:	4a96      	ldr	r2, [pc, #600]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	4997      	ldr	r1, [pc, #604]	; (800164c <HAL_RCC_OscConfig+0x330>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d014      	beq.n	8001424 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7fe ff4d 	bl	8000298 <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001404:	f7fe ff48 	bl	8000298 <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e267      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	029b      	lsls	r3, r3, #10
 800141e:	4013      	ands	r3, r2
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0xe8>
 8001422:	e015      	b.n	8001450 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7fe ff38 	bl	8000298 <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142e:	f7fe ff33 	bl	8000298 <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b64      	cmp	r3, #100	; 0x64
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e252      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001440:	4b80      	ldr	r3, [pc, #512]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	029b      	lsls	r3, r3, #10
 8001448:	4013      	ands	r3, r2
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0x112>
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2202      	movs	r2, #2
 8001456:	4013      	ands	r3, r2
 8001458:	d100      	bne.n	800145c <HAL_RCC_OscConfig+0x140>
 800145a:	e069      	b.n	8001530 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800145c:	4b79      	ldr	r3, [pc, #484]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	220c      	movs	r2, #12
 8001462:	4013      	ands	r3, r2
 8001464:	d00b      	beq.n	800147e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001466:	4b77      	ldr	r3, [pc, #476]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	220c      	movs	r2, #12
 800146c:	4013      	ands	r3, r2
 800146e:	2b08      	cmp	r3, #8
 8001470:	d11c      	bne.n	80014ac <HAL_RCC_OscConfig+0x190>
 8001472:	4b74      	ldr	r3, [pc, #464]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	025b      	lsls	r3, r3, #9
 800147a:	4013      	ands	r3, r2
 800147c:	d116      	bne.n	80014ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	4b71      	ldr	r3, [pc, #452]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d005      	beq.n	8001494 <HAL_RCC_OscConfig+0x178>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e228      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4a6b      	ldr	r2, [pc, #428]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001496:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	21f8      	movs	r1, #248	; 0xf8
 800149c:	438b      	bics	r3, r1
 800149e:	0019      	movs	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	430b      	orrs	r3, r1
 80014a8:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	e041      	b.n	8001530 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d024      	beq.n	80014fe <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b63      	ldr	r3, [pc, #396]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80014b6:	4a63      	ldr	r2, [pc, #396]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7fe feea 	bl	8000298 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ca:	f7fe fee5 	bl	8000298 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e204      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	4b59      	ldr	r3, [pc, #356]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2202      	movs	r2, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d0f1      	beq.n	80014ca <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4a57      	ldr	r2, [pc, #348]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80014e8:	4b56      	ldr	r3, [pc, #344]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	21f8      	movs	r1, #248	; 0xf8
 80014ee:	438b      	bics	r3, r1
 80014f0:	0019      	movs	r1, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e018      	b.n	8001530 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001500:	4a50      	ldr	r2, [pc, #320]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	438a      	bics	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7fe fec5 	bl	8000298 <HAL_GetTick>
 800150e:	0003      	movs	r3, r0
 8001510:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001514:	f7fe fec0 	bl	8000298 <HAL_GetTick>
 8001518:	0002      	movs	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e1df      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d1f1      	bne.n	8001514 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2208      	movs	r2, #8
 8001536:	4013      	ands	r3, r2
 8001538:	d036      	beq.n	80015a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d019      	beq.n	8001576 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001542:	4b40      	ldr	r3, [pc, #256]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001544:	4a3f      	ldr	r2, [pc, #252]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001548:	2101      	movs	r1, #1
 800154a:	430a      	orrs	r2, r1
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7fe fea3 	bl	8000298 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001558:	f7fe fe9e 	bl	8000298 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1bd      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d0f1      	beq.n	8001558 <HAL_RCC_OscConfig+0x23c>
 8001574:	e018      	b.n	80015a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001578:	4a32      	ldr	r2, [pc, #200]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 800157a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800157c:	2101      	movs	r1, #1
 800157e:	438a      	bics	r2, r1
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7fe fe89 	bl	8000298 <HAL_GetTick>
 8001586:	0003      	movs	r3, r0
 8001588:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158c:	f7fe fe84 	bl	8000298 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1a3      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d1f1      	bne.n	800158c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2204      	movs	r2, #4
 80015ae:	4013      	ands	r3, r2
 80015b0:	d100      	bne.n	80015b4 <HAL_RCC_OscConfig+0x298>
 80015b2:	e0b5      	b.n	8001720 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b4:	2317      	movs	r3, #23
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80015be:	69da      	ldr	r2, [r3, #28]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	055b      	lsls	r3, r3, #21
 80015c4:	4013      	ands	r3, r2
 80015c6:	d111      	bne.n	80015ec <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80015ca:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80015cc:	69d2      	ldr	r2, [r2, #28]
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	0549      	lsls	r1, r1, #21
 80015d2:	430a      	orrs	r2, r1
 80015d4:	61da      	str	r2, [r3, #28]
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	055b      	lsls	r3, r3, #21
 80015de:	4013      	ands	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015e4:	2317      	movs	r3, #23
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_RCC_OscConfig+0x334>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4013      	ands	r3, r2
 80015f6:	d11a      	bne.n	800162e <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_RCC_OscConfig+0x334>)
 80015fa:	4a15      	ldr	r2, [pc, #84]	; (8001650 <HAL_RCC_OscConfig+0x334>)
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	0049      	lsls	r1, r1, #1
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001606:	f7fe fe47 	bl	8000298 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001610:	f7fe fe42 	bl	8000298 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e161      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_OscConfig+0x334>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4013      	ands	r3, r2
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10e      	bne.n	8001654 <HAL_RCC_OscConfig+0x338>
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 8001638:	4a02      	ldr	r2, [pc, #8]	; (8001644 <HAL_RCC_OscConfig+0x328>)
 800163a:	6a12      	ldr	r2, [r2, #32]
 800163c:	2101      	movs	r1, #1
 800163e:	430a      	orrs	r2, r1
 8001640:	621a      	str	r2, [r3, #32]
 8001642:	e035      	b.n	80016b0 <HAL_RCC_OscConfig+0x394>
 8001644:	40021000 	.word	0x40021000
 8001648:	fffeffff 	.word	0xfffeffff
 800164c:	fffbffff 	.word	0xfffbffff
 8001650:	40007000 	.word	0x40007000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x35a>
 800165c:	4ba4      	ldr	r3, [pc, #656]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800165e:	4aa4      	ldr	r2, [pc, #656]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001660:	6a12      	ldr	r2, [r2, #32]
 8001662:	2101      	movs	r1, #1
 8001664:	438a      	bics	r2, r1
 8001666:	621a      	str	r2, [r3, #32]
 8001668:	4ba1      	ldr	r3, [pc, #644]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800166a:	4aa1      	ldr	r2, [pc, #644]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800166c:	6a12      	ldr	r2, [r2, #32]
 800166e:	2104      	movs	r1, #4
 8001670:	438a      	bics	r2, r1
 8001672:	621a      	str	r2, [r3, #32]
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x394>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x37c>
 800167e:	4b9c      	ldr	r3, [pc, #624]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001680:	4a9b      	ldr	r2, [pc, #620]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001682:	6a12      	ldr	r2, [r2, #32]
 8001684:	2104      	movs	r1, #4
 8001686:	430a      	orrs	r2, r1
 8001688:	621a      	str	r2, [r3, #32]
 800168a:	4b99      	ldr	r3, [pc, #612]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800168c:	4a98      	ldr	r2, [pc, #608]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800168e:	6a12      	ldr	r2, [r2, #32]
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	621a      	str	r2, [r3, #32]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x394>
 8001698:	4b95      	ldr	r3, [pc, #596]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800169a:	4a95      	ldr	r2, [pc, #596]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800169c:	6a12      	ldr	r2, [r2, #32]
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	621a      	str	r2, [r3, #32]
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80016a6:	4a92      	ldr	r2, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80016a8:	6a12      	ldr	r2, [r2, #32]
 80016aa:	2104      	movs	r1, #4
 80016ac:	438a      	bics	r2, r1
 80016ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d014      	beq.n	80016e2 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7fe fdee 	bl	8000298 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7fe fde9 	bl	8000298 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a89      	ldr	r2, [pc, #548]	; (80018f4 <HAL_RCC_OscConfig+0x5d8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e107      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	4b86      	ldr	r3, [pc, #536]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x3a6>
 80016e0:	e013      	b.n	800170a <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7fe fdd9 	bl	8000298 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	e009      	b.n	8001700 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7fe fdd4 	bl	8000298 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a7f      	ldr	r2, [pc, #508]	; (80018f4 <HAL_RCC_OscConfig+0x5d8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0f2      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800170a:	2317      	movs	r3, #23
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001716:	4a76      	ldr	r2, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001718:	69d2      	ldr	r2, [r2, #28]
 800171a:	4977      	ldr	r1, [pc, #476]	; (80018f8 <HAL_RCC_OscConfig+0x5dc>)
 800171c:	400a      	ands	r2, r1
 800171e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2210      	movs	r2, #16
 8001726:	4013      	ands	r3, r2
 8001728:	d063      	beq.n	80017f2 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d12a      	bne.n	8001788 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001734:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001736:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001738:	2104      	movs	r1, #4
 800173a:	430a      	orrs	r2, r1
 800173c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800173e:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001740:	4a6b      	ldr	r2, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001742:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7fe fda5 	bl	8000298 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001754:	f7fe fda0 	bl	8000298 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0bf      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001766:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d0f1      	beq.n	8001754 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001770:	4a5f      	ldr	r2, [pc, #380]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001776:	21f8      	movs	r1, #248	; 0xf8
 8001778:	438b      	bics	r3, r1
 800177a:	0019      	movs	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	430b      	orrs	r3, r1
 8001784:	6353      	str	r3, [r2, #52]	; 0x34
 8001786:	e034      	b.n	80017f2 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	3305      	adds	r3, #5
 800178e:	d111      	bne.n	80017b4 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001792:	4a57      	ldr	r2, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001794:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001796:	2104      	movs	r1, #4
 8001798:	438a      	bics	r2, r1
 800179a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800179c:	4a54      	ldr	r2, [pc, #336]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800179e:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	21f8      	movs	r1, #248	; 0xf8
 80017a4:	438b      	bics	r3, r1
 80017a6:	0019      	movs	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	430b      	orrs	r3, r1
 80017b0:	6353      	str	r3, [r2, #52]	; 0x34
 80017b2:	e01e      	b.n	80017f2 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017b4:	4b4e      	ldr	r3, [pc, #312]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80017b6:	4a4e      	ldr	r2, [pc, #312]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80017b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017ba:	2104      	movs	r1, #4
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017c0:	4b4b      	ldr	r3, [pc, #300]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80017c2:	4a4b      	ldr	r2, [pc, #300]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80017c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017c6:	2101      	movs	r1, #1
 80017c8:	438a      	bics	r2, r1
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7fe fd64 	bl	8000298 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017d6:	f7fe fd5f 	bl	8000298 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e07e      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017e8:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80017ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1f1      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d100      	bne.n	80017fc <HAL_RCC_OscConfig+0x4e0>
 80017fa:	e073      	b.n	80018e4 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fc:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	220c      	movs	r2, #12
 8001802:	4013      	ands	r3, r2
 8001804:	2b08      	cmp	r3, #8
 8001806:	d100      	bne.n	800180a <HAL_RCC_OscConfig+0x4ee>
 8001808:	e06a      	b.n	80018e0 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d14b      	bne.n	80018aa <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001814:	4a36      	ldr	r2, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	4938      	ldr	r1, [pc, #224]	; (80018fc <HAL_RCC_OscConfig+0x5e0>)
 800181a:	400a      	ands	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7fe fd3b 	bl	8000298 <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001828:	f7fe fd36 	bl	8000298 <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e055      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	049b      	lsls	r3, r3, #18
 8001842:	4013      	ands	r3, r2
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001846:	4a2a      	ldr	r2, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	210f      	movs	r1, #15
 800184e:	438b      	bics	r3, r1
 8001850:	0019      	movs	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	430b      	orrs	r3, r1
 8001858:	62d3      	str	r3, [r2, #44]	; 0x2c
 800185a:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4927      	ldr	r1, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x5e4>)
 8001862:	4019      	ands	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	4303      	orrs	r3, r0
 800186e:	430b      	orrs	r3, r1
 8001870:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	0449      	lsls	r1, r1, #17
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7fe fd0a 	bl	8000298 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188a:	f7fe fd05 	bl	8000298 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e024      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	049b      	lsls	r3, r3, #18
 80018a4:	4013      	ands	r3, r2
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x56e>
 80018a8:	e01c      	b.n	80018e4 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80018ac:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	4912      	ldr	r1, [pc, #72]	; (80018fc <HAL_RCC_OscConfig+0x5e0>)
 80018b2:	400a      	ands	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7fe fcef 	bl	8000298 <HAL_GetTick>
 80018ba:	0003      	movs	r3, r0
 80018bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7fe fcea 	bl	8000298 <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e009      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_RCC_OscConfig+0x5d4>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	049b      	lsls	r3, r3, #18
 80018da:	4013      	ands	r3, r2
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x5a4>
 80018de:	e001      	b.n	80018e4 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b006      	add	sp, #24
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	40021000 	.word	0x40021000
 80018f4:	00001388 	.word	0x00001388
 80018f8:	efffffff 	.word	0xefffffff
 80018fc:	feffffff 	.word	0xfeffffff
 8001900:	ffc2ffff 	.word	0xffc2ffff

08001904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001912:	4b69      	ldr	r3, [pc, #420]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2201      	movs	r2, #1
 8001918:	401a      	ands	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d211      	bcs.n	8001944 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001920:	4b65      	ldr	r3, [pc, #404]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001922:	4a65      	ldr	r2, [pc, #404]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	438a      	bics	r2, r1
 800192a:	0011      	movs	r1, r2
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2201      	movs	r2, #1
 8001938:	401a      	ands	r2, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b5      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2202      	movs	r2, #2
 800194a:	4013      	ands	r3, r2
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194e:	4a5b      	ldr	r2, [pc, #364]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	4b5a      	ldr	r3, [pc, #360]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	21f0      	movs	r1, #240	; 0xf0
 8001956:	438b      	bics	r3, r1
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	430b      	orrs	r3, r1
 8001960:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2201      	movs	r2, #1
 8001968:	4013      	ands	r3, r2
 800196a:	d100      	bne.n	800196e <HAL_RCC_ClockConfig+0x6a>
 800196c:	e067      	b.n	8001a3e <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	029b      	lsls	r3, r3, #10
 800197e:	4013      	ands	r3, r2
 8001980:	d114      	bne.n	80019ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e094      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	049b      	lsls	r3, r3, #18
 8001996:	4013      	ands	r3, r2
 8001998:	d108      	bne.n	80019ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e088      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e081      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ac:	4a43      	ldr	r2, [pc, #268]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2103      	movs	r1, #3
 80019b4:	438b      	bics	r3, r1
 80019b6:	0019      	movs	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	430b      	orrs	r3, r1
 80019be:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c0:	f7fe fc6a 	bl	8000298 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d111      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d2:	f7fe fc61 	bl	8000298 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4a38      	ldr	r2, [pc, #224]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e064      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e6:	4b35      	ldr	r3, [pc, #212]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	220c      	movs	r2, #12
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d1ef      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xce>
 80019f2:	e024      	b.n	8001a3e <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d11b      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fe:	f7fe fc4b 	bl	8000298 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a2d      	ldr	r2, [pc, #180]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e04e      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a12:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	220c      	movs	r2, #12
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d1ef      	bne.n	80019fe <HAL_RCC_ClockConfig+0xfa>
 8001a1e:	e00e      	b.n	8001a3e <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a20:	f7fe fc3a 	bl	8000298 <HAL_GetTick>
 8001a24:	0002      	movs	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	4a25      	ldr	r2, [pc, #148]	; (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e03d      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	220c      	movs	r2, #12
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2201      	movs	r2, #1
 8001a44:	401a      	ands	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d911      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	2101      	movs	r1, #1
 8001a54:	438a      	bics	r2, r1
 8001a56:	0011      	movs	r1, r2
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	401a      	ands	r2, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e01f      	b.n	8001ab0 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2204      	movs	r2, #4
 8001a76:	4013      	ands	r3, r2
 8001a78:	d008      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4910      	ldr	r1, [pc, #64]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a82:	4019      	ands	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a8c:	f000 f820 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a90:	0001      	movs	r1, r0
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	220f      	movs	r2, #15
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	000a      	movs	r2, r1
 8001aa2:	40da      	lsrs	r2, r3
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7fe fbcd 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b004      	add	sp, #16
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40022000 	.word	0x40022000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	00001388 	.word	0x00001388
 8001ac4:	fffff8ff 	.word	0xfffff8ff
 8001ac8:	08003c3c 	.word	0x08003c3c
 8001acc:	20000000 	.word	0x20000000

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b08f      	sub	sp, #60	; 0x3c
 8001ad4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ad6:	2314      	movs	r3, #20
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xac>)
 8001adc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ade:	c313      	stmia	r3!, {r0, r1, r4}
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ae8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001aea:	c313      	stmia	r3!, {r0, r1, r4}
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d002      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x4a>
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d003      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x50>
 8001b18:	e027      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b1e:	e027      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b22:	0c9b      	lsrs	r3, r3, #18
 8001b24:	220f      	movs	r2, #15
 8001b26:	4013      	ands	r3, r2
 8001b28:	2214      	movs	r2, #20
 8001b2a:	18ba      	adds	r2, r7, r2
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	220f      	movs	r2, #15
 8001b36:	4013      	ands	r3, r2
 8001b38:	1d3a      	adds	r2, r7, #4
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	025b      	lsls	r3, r3, #9
 8001b44:	4013      	ands	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4a:	480f      	ldr	r0, [pc, #60]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4c:	f7fe fadc 	bl	8000108 <__udivsi3>
 8001b50:	0003      	movs	r3, r0
 8001b52:	001a      	movs	r2, r3
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	4353      	muls	r3, r2
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5a:	e003      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b60:	4353      	muls	r3, r2
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b68:	e002      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b6e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b00f      	add	sp, #60	; 0x3c
 8001b78:	bd90      	pop	{r4, r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	08003b24 	.word	0x08003b24
 8001b80:	08003b34 	.word	0x08003b34
 8001b84:	40021000 	.word	0x40021000
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	003d0900 	.word	0x003d0900
 8001b90:	007a1200 	.word	0x007a1200

08001b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b98:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bac:	f7ff fff2 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bb0:	0001      	movs	r1, r0
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	2207      	movs	r2, #7
 8001bba:	4013      	ands	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	40d9      	lsrs	r1, r3
 8001bc2:	000b      	movs	r3, r1
}    
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08003c4c 	.word	0x08003c4c

08001bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	4013      	ands	r3, r2
 8001bee:	d100      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001bf0:	e08e      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2317      	movs	r3, #23
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bfc:	69da      	ldr	r2, [r3, #28]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	055b      	lsls	r3, r3, #21
 8001c02:	4013      	ands	r3, r2
 8001c04:	d111      	bne.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4b54      	ldr	r3, [pc, #336]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c08:	4a53      	ldr	r2, [pc, #332]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c0a:	69d2      	ldr	r2, [r2, #28]
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	0549      	lsls	r1, r1, #21
 8001c10:	430a      	orrs	r2, r1
 8001c12:	61da      	str	r2, [r3, #28]
 8001c14:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	055b      	lsls	r3, r3, #21
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2317      	movs	r3, #23
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4013      	ands	r3, r2
 8001c34:	d11a      	bne.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c36:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c38:	4a48      	ldr	r2, [pc, #288]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0049      	lsls	r1, r1, #1
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c44:	f7fe fb28 	bl	8000298 <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	e008      	b.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4e:	f7fe fb23 	bl	8000298 <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b64      	cmp	r3, #100	; 0x64
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e076      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c6e:	6a1a      	ldr	r2, [r3, #32]
 8001c70:	23c0      	movs	r3, #192	; 0xc0
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d034      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	23c0      	movs	r3, #192	; 0xc0
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	401a      	ands	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d02c      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a33      	ldr	r2, [pc, #204]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c98:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c9c:	6a12      	ldr	r2, [r2, #32]
 8001c9e:	2180      	movs	r1, #128	; 0x80
 8001ca0:	0249      	lsls	r1, r1, #9
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ca6:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ca8:	4a2b      	ldr	r2, [pc, #172]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001caa:	6a12      	ldr	r2, [r2, #32]
 8001cac:	492d      	ldr	r1, [pc, #180]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001cae:	400a      	ands	r2, r1
 8001cb0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7fe faea 	bl	8000298 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc8:	e009      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7fe fae5 	bl	8000298 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e037      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	491c      	ldr	r1, [pc, #112]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001cf0:	4019      	ands	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cfa:	2317      	movs	r3, #23
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d06:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d08:	69d2      	ldr	r2, [r2, #28]
 8001d0a:	4918      	ldr	r1, [pc, #96]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	d009      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	2103      	movs	r1, #3
 8001d22:	438b      	bics	r3, r1
 8001d24:	0019      	movs	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2220      	movs	r2, #32
 8001d34:	4013      	ands	r3, r2
 8001d36:	d009      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	2110      	movs	r1, #16
 8001d40:	438b      	bics	r3, r1
 8001d42:	0019      	movs	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b006      	add	sp, #24
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	fffffcff 	.word	0xfffffcff
 8001d64:	fffeffff 	.word	0xfffeffff
 8001d68:	00001388 	.word	0x00001388
 8001d6c:	efffffff 	.word	0xefffffff

08001d70 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e01e      	b.n	8001dc0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	223d      	movs	r2, #61	; 0x3d
 8001d86:	5c9b      	ldrb	r3, [r3, r2]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d107      	bne.n	8001d9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	223c      	movs	r2, #60	; 0x3c
 8001d92:	2100      	movs	r1, #0
 8001d94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f001 fd07 	bl	80037ac <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	223d      	movs	r2, #61	; 0x3d
 8001da2:	2102      	movs	r1, #2
 8001da4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	0019      	movs	r1, r3
 8001db0:	0010      	movs	r0, r2
 8001db2:	f000 f929 	bl	8002008 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	223d      	movs	r2, #61	; 0x3d
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e01e      	b.n	8001e18 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	223d      	movs	r2, #61	; 0x3d
 8001dde:	5c9b      	ldrb	r3, [r3, r2]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d107      	bne.n	8001df6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	223c      	movs	r2, #60	; 0x3c
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f001 fcbd 	bl	8003770 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	223d      	movs	r2, #61	; 0x3d
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3304      	adds	r3, #4
 8001e06:	0019      	movs	r1, r3
 8001e08:	0010      	movs	r0, r2
 8001e0a:	f000 f8fd 	bl	8002008 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	223d      	movs	r2, #61	; 0x3d
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6839      	ldr	r1, [r7, #0]
 8001e30:	2201      	movs	r2, #1
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 fb4e 	bl	80024d4 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a13      	ldr	r2, [pc, #76]	; (8001e8c <HAL_TIM_PWM_Start+0x6c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_TIM_PWM_Start+0x36>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <HAL_TIM_PWM_Start+0x70>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d004      	beq.n	8001e56 <HAL_TIM_PWM_Start+0x36>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_TIM_PWM_Start+0x74>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_PWM_Start+0x3a>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_TIM_PWM_Start+0x3c>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0209      	lsls	r1, r1, #8
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40014400 	.word	0x40014400
 8001e94:	40014800 	.word	0x40014800

08001e98 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	223c      	movs	r2, #60	; 0x3c
 8001ea8:	5c9b      	ldrb	r3, [r3, r2]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e0a4      	b.n	8001ffc <HAL_TIM_PWM_ConfigChannel+0x164>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	223c      	movs	r2, #60	; 0x3c
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	223d      	movs	r2, #61	; 0x3d
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d029      	beq.n	8001f1c <HAL_TIM_PWM_ConfigChannel+0x84>
 8001ec8:	d802      	bhi.n	8001ed0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 8001ece:	e08c      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d046      	beq.n	8001f62 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d065      	beq.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8001ed8:	e087      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	0011      	movs	r1, r2
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 f8fe 	bl	80020e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	6992      	ldr	r2, [r2, #24]
 8001ef2:	2108      	movs	r1, #8
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	6992      	ldr	r2, [r2, #24]
 8001f02:	2104      	movs	r1, #4
 8001f04:	438a      	bics	r2, r1
 8001f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	6991      	ldr	r1, [r2, #24]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	6912      	ldr	r2, [r2, #16]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	619a      	str	r2, [r3, #24]
    break;
 8001f1a:	e066      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	0011      	movs	r1, r2
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 f961 	bl	80021ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	6992      	ldr	r2, [r2, #24]
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0109      	lsls	r1, r1, #4
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	6992      	ldr	r2, [r2, #24]
 8001f46:	492f      	ldr	r1, [pc, #188]	; (8002004 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001f48:	400a      	ands	r2, r1
 8001f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	6991      	ldr	r1, [r2, #24]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	6912      	ldr	r2, [r2, #16]
 8001f5a:	0212      	lsls	r2, r2, #8
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	619a      	str	r2, [r3, #24]
    break;
 8001f60:	e043      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	0011      	movs	r1, r2
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 f9c2 	bl	80022f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	69d2      	ldr	r2, [r2, #28]
 8001f7a:	2108      	movs	r1, #8
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	69d2      	ldr	r2, [r2, #28]
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	438a      	bics	r2, r1
 8001f8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	69d1      	ldr	r1, [r2, #28]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	6912      	ldr	r2, [r2, #16]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	61da      	str	r2, [r3, #28]
    break;
 8001fa2:	e022      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	0011      	movs	r1, r2
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 fa27 	bl	8002400 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	69d2      	ldr	r2, [r2, #28]
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	0109      	lsls	r1, r1, #4
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	69d2      	ldr	r2, [r2, #28]
 8001fce:	490d      	ldr	r1, [pc, #52]	; (8002004 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	69d1      	ldr	r1, [r2, #28]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	6912      	ldr	r2, [r2, #16]
 8001fe2:	0212      	lsls	r2, r2, #8
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	61da      	str	r2, [r3, #28]
    break;
 8001fe8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	223d      	movs	r2, #61	; 0x3d
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	223c      	movs	r2, #60	; 0x3c
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b004      	add	sp, #16
 8002002:	bd80      	pop	{r7, pc}
 8002004:	fffffbff 	.word	0xfffffbff

08002008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <TIM_Base_SetConfig+0xc4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x24>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <TIM_Base_SetConfig+0xc8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d108      	bne.n	800203e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2270      	movs	r2, #112	; 0x70
 8002030:	4393      	bics	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a22      	ldr	r2, [pc, #136]	; (80020cc <TIM_Base_SetConfig+0xc4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00f      	beq.n	8002066 <TIM_Base_SetConfig+0x5e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <TIM_Base_SetConfig+0xc8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00b      	beq.n	8002066 <TIM_Base_SetConfig+0x5e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <TIM_Base_SetConfig+0xcc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <TIM_Base_SetConfig+0x5e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <TIM_Base_SetConfig+0xd0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d003      	beq.n	8002066 <TIM_Base_SetConfig+0x5e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <TIM_Base_SetConfig+0xd4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d108      	bne.n	8002078 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <TIM_Base_SetConfig+0xd8>)
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	4393      	bics	r3, r2
 800207e:	001a      	movs	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <TIM_Base_SetConfig+0xc4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <TIM_Base_SetConfig+0xae>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <TIM_Base_SetConfig+0xd0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_Base_SetConfig+0xae>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <TIM_Base_SetConfig+0xd4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d103      	bne.n	80020be <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	615a      	str	r2, [r3, #20]
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40002000 	.word	0x40002000
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800
 80020e0:	fffffcff 	.word	0xfffffcff

080020e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	2201      	movs	r2, #1
 8002100:	4393      	bics	r3, r2
 8002102:	001a      	movs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2270      	movs	r2, #112	; 0x70
 800211e:	4393      	bics	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2203      	movs	r2, #3
 8002126:	4393      	bics	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2202      	movs	r2, #2
 8002138:	4393      	bics	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <TIM_OC1_SetConfig+0xf4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <TIM_OC1_SetConfig+0x7a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <TIM_OC1_SetConfig+0xf8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d003      	beq.n	800215e <TIM_OC1_SetConfig+0x7a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <TIM_OC1_SetConfig+0xfc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10c      	bne.n	8002178 <TIM_OC1_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2208      	movs	r2, #8
 8002162:	4393      	bics	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2204      	movs	r2, #4
 8002174:	4393      	bics	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <TIM_OC1_SetConfig+0xf4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <TIM_OC1_SetConfig+0xac>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a16      	ldr	r2, [pc, #88]	; (80021dc <TIM_OC1_SetConfig+0xf8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_OC1_SetConfig+0xac>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <TIM_OC1_SetConfig+0xfc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d111      	bne.n	80021b4 <TIM_OC1_SetConfig+0xd0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <TIM_OC1_SetConfig+0x100>)
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <TIM_OC1_SetConfig+0x104>)
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	621a      	str	r2, [r3, #32]
}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b006      	add	sp, #24
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40014400 	.word	0x40014400
 80021e0:	40014800 	.word	0x40014800
 80021e4:	fffffeff 	.word	0xfffffeff
 80021e8:	fffffdff 	.word	0xfffffdff

080021ec <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	2210      	movs	r2, #16
 8002208:	4393      	bics	r3, r2
 800220a:	001a      	movs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a2c      	ldr	r2, [pc, #176]	; (80022d8 <TIM_OC2_SetConfig+0xec>)
 8002226:	4013      	ands	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <TIM_OC2_SetConfig+0xf0>)
 800222e:	4013      	ands	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2220      	movs	r2, #32
 8002242:	4393      	bics	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a22      	ldr	r2, [pc, #136]	; (80022e0 <TIM_OC2_SetConfig+0xf4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10d      	bne.n	8002276 <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	4393      	bics	r3, r2
 8002260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2240      	movs	r2, #64	; 0x40
 8002272:	4393      	bics	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <TIM_OC2_SetConfig+0xf4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <TIM_OC2_SetConfig+0xa2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <TIM_OC2_SetConfig+0xf8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <TIM_OC2_SetConfig+0xa2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <TIM_OC2_SetConfig+0xfc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d113      	bne.n	80022b6 <TIM_OC2_SetConfig+0xca>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4a16      	ldr	r2, [pc, #88]	; (80022ec <TIM_OC2_SetConfig+0x100>)
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <TIM_OC2_SetConfig+0x104>)
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	621a      	str	r2, [r3, #32]
}
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b006      	add	sp, #24
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	ffff8fff 	.word	0xffff8fff
 80022dc:	fffffcff 	.word	0xfffffcff
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40014400 	.word	0x40014400
 80022e8:	40014800 	.word	0x40014800
 80022ec:	fffffbff 	.word	0xfffffbff
 80022f0:	fffff7ff 	.word	0xfffff7ff

080022f4 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a33      	ldr	r2, [pc, #204]	; (80023dc <TIM_OC3_SetConfig+0xe8>)
 8002310:	401a      	ands	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2270      	movs	r2, #112	; 0x70
 800232c:	4393      	bics	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2203      	movs	r2, #3
 8002334:	4393      	bics	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <TIM_OC3_SetConfig+0xec>)
 8002346:	4013      	ands	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <TIM_OC3_SetConfig+0xf0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10d      	bne.n	800237a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <TIM_OC3_SetConfig+0xf4>)
 8002362:	4013      	ands	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <TIM_OC3_SetConfig+0xf8>)
 8002376:	4013      	ands	r3, r2
 8002378:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <TIM_OC3_SetConfig+0xf0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <TIM_OC3_SetConfig+0x9e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <TIM_OC3_SetConfig+0xfc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d003      	beq.n	8002392 <TIM_OC3_SetConfig+0x9e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <TIM_OC3_SetConfig+0x100>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d113      	bne.n	80023ba <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <TIM_OC3_SetConfig+0x104>)
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4a17      	ldr	r2, [pc, #92]	; (80023fc <TIM_OC3_SetConfig+0x108>)
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	621a      	str	r2, [r3, #32]
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b006      	add	sp, #24
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	fffffeff 	.word	0xfffffeff
 80023e0:	fffffdff 	.word	0xfffffdff
 80023e4:	40012c00 	.word	0x40012c00
 80023e8:	fffff7ff 	.word	0xfffff7ff
 80023ec:	fffffbff 	.word	0xfffffbff
 80023f0:	40014400 	.word	0x40014400
 80023f4:	40014800 	.word	0x40014800
 80023f8:	ffffefff 	.word	0xffffefff
 80023fc:	ffffdfff 	.word	0xffffdfff

08002400 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <TIM_OC4_SetConfig+0xb4>)
 800241c:	401a      	ands	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4a20      	ldr	r2, [pc, #128]	; (80024b8 <TIM_OC4_SetConfig+0xb8>)
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <TIM_OC4_SetConfig+0xbc>)
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <TIM_OC4_SetConfig+0xc0>)
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	031b      	lsls	r3, r3, #12
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a17      	ldr	r2, [pc, #92]	; (80024c4 <TIM_OC4_SetConfig+0xc4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d007      	beq.n	800247c <TIM_OC4_SetConfig+0x7c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <TIM_OC4_SetConfig+0xc8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <TIM_OC4_SetConfig+0x7c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a15      	ldr	r2, [pc, #84]	; (80024cc <TIM_OC4_SetConfig+0xcc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d109      	bne.n	8002490 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <TIM_OC4_SetConfig+0xd0>)
 8002480:	4013      	ands	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	019b      	lsls	r3, r3, #6
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	621a      	str	r2, [r3, #32]
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b006      	add	sp, #24
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	ffffefff 	.word	0xffffefff
 80024b8:	ffff8fff 	.word	0xffff8fff
 80024bc:	fffffcff 	.word	0xfffffcff
 80024c0:	ffffdfff 	.word	0xffffdfff
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40014400 	.word	0x40014400
 80024cc:	40014800 	.word	0x40014800
 80024d0:	ffffbfff 	.word	0xffffbfff

080024d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80024e4:	2201      	movs	r2, #1
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	409a      	lsls	r2, r3
 80024ea:	0013      	movs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	43d2      	mvns	r2, r2
 80024f6:	401a      	ands	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a1a      	ldr	r2, [r3, #32]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4099      	lsls	r1, r3
 8002506:	000b      	movs	r3, r1
 8002508:	431a      	orrs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	621a      	str	r2, [r3, #32]
}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b006      	add	sp, #24
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	223c      	movs	r2, #60	; 0x3c
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800252a:	2302      	movs	r3, #2
 800252c:	e032      	b.n	8002594 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	223c      	movs	r2, #60	; 0x3c
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	223d      	movs	r2, #61	; 0x3d
 800253a:	2102      	movs	r1, #2
 800253c:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	6852      	ldr	r2, [r2, #4]
 8002548:	2170      	movs	r1, #112	; 0x70
 800254a:	438a      	bics	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	6851      	ldr	r1, [r2, #4]
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	6892      	ldr	r2, [r2, #8]
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	438a      	bics	r2, r1
 800256e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	6891      	ldr	r1, [r2, #8]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6852      	ldr	r2, [r2, #4]
 800257e:	430a      	orrs	r2, r1
 8002580:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	223d      	movs	r2, #61	; 0x3d
 8002586:	2101      	movs	r1, #1
 8002588:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	223c      	movs	r2, #60	; 0x3c
 800258e:	2100      	movs	r1, #0
 8002590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e047      	b.n	800263e <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2269      	movs	r2, #105	; 0x69
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2268      	movs	r2, #104	; 0x68
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f001 f9b3 	bl	8003930 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2269      	movs	r2, #105	; 0x69
 80025ce:	2124      	movs	r1, #36	; 0x24
 80025d0:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	2101      	movs	r1, #1
 80025de:	438a      	bics	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 f943 	bl	8002870 <UART_SetConfig>
 80025ea:	0003      	movs	r3, r0
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e024      	b.n	800263e <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 fa94 	bl	8002b2c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	6852      	ldr	r2, [r2, #4]
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_UART_Init+0xac>)
 8002610:	400a      	ands	r2, r1
 8002612:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	6892      	ldr	r2, [r2, #8]
 800261e:	2108      	movs	r1, #8
 8002620:	438a      	bics	r2, r1
 8002622:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	2101      	movs	r1, #1
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	0018      	movs	r0, r3
 8002638:	f000 fb24 	bl	8002c84 <UART_CheckIdleState>
 800263c:	0003      	movs	r3, r0
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b002      	add	sp, #8
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	fffff7ff 	.word	0xfffff7ff

0800264c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	220f      	movs	r2, #15
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2220      	movs	r2, #32
 8002676:	4013      	ands	r3, r2
 8002678:	d008      	beq.n	800268c <HAL_UART_IRQHandler+0x40>
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2220      	movs	r2, #32
 800267e:	4013      	ands	r3, r2
 8002680:	d004      	beq.n	800268c <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 fbbb 	bl	8002e00 <UART_Receive_IT>
      return;
 800268a:	e0d3      	b.n	8002834 <HAL_UART_IRQHandler+0x1e8>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d100      	bne.n	800269c <HAL_UART_IRQHandler+0x50>
 800269a:	e0af      	b.n	80027fc <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2201      	movs	r2, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	d105      	bne.n	80026b0 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	2390      	movs	r3, #144	; 0x90
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4013      	ands	r3, r2
 80026ac:	d100      	bne.n	80026b0 <HAL_UART_IRQHandler+0x64>
 80026ae:	e0a5      	b.n	80027fc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	d00e      	beq.n	80026d6 <HAL_UART_IRQHandler+0x8a>
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4013      	ands	r3, r2
 80026c0:	d009      	beq.n	80026d6 <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ce:	2201      	movs	r2, #1
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2202      	movs	r2, #2
 80026da:	4013      	ands	r3, r2
 80026dc:	d00d      	beq.n	80026fa <HAL_UART_IRQHandler+0xae>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2201      	movs	r2, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	d009      	beq.n	80026fa <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2202      	movs	r2, #2
 80026ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f2:	2204      	movs	r2, #4
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2204      	movs	r2, #4
 80026fe:	4013      	ands	r3, r2
 8002700:	d00d      	beq.n	800271e <HAL_UART_IRQHandler+0xd2>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2201      	movs	r2, #1
 8002706:	4013      	ands	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2204      	movs	r2, #4
 8002710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002716:	2202      	movs	r2, #2
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2208      	movs	r2, #8
 8002722:	4013      	ands	r3, r2
 8002724:	d011      	beq.n	800274a <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2220      	movs	r2, #32
 800272a:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800272c:	d103      	bne.n	8002736 <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2201      	movs	r2, #1
 8002732:	4013      	ands	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2208      	movs	r2, #8
 800273c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002742:	2208      	movs	r2, #8
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d100      	bne.n	8002754 <HAL_UART_IRQHandler+0x108>
 8002752:	e06e      	b.n	8002832 <HAL_UART_IRQHandler+0x1e6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2220      	movs	r2, #32
 8002758:	4013      	ands	r3, r2
 800275a:	d007      	beq.n	800276c <HAL_UART_IRQHandler+0x120>
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2220      	movs	r2, #32
 8002760:	4013      	ands	r3, r2
 8002762:	d003      	beq.n	800276c <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0018      	movs	r0, r3
 8002768:	f000 fb4a 	bl	8002e00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002770:	2208      	movs	r2, #8
 8002772:	4013      	ands	r3, r2
 8002774:	d105      	bne.n	8002782 <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002780:	d032      	beq.n	80027e8 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0018      	movs	r0, r3
 8002786:	f000 fa95 	bl	8002cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2240      	movs	r2, #64	; 0x40
 8002792:	4013      	ands	r3, r2
 8002794:	d023      	beq.n	80027de <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	6892      	ldr	r2, [r2, #8]
 80027a0:	2140      	movs	r1, #64	; 0x40
 80027a2:	438a      	bics	r2, r1
 80027a4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b2:	4a22      	ldr	r2, [pc, #136]	; (800283c <HAL_UART_IRQHandler+0x1f0>)
 80027b4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7fd fecc 	bl	8000558 <HAL_DMA_Abort_IT>
 80027c0:	1e03      	subs	r3, r0, #0
 80027c2:	d019      	beq.n	80027f8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ce:	0018      	movs	r0, r3
 80027d0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d2:	e011      	b.n	80027f8 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 f842 	bl	8002860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027dc:	e00c      	b.n	80027f8 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 f83d 	bl	8002860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e6:	e007      	b.n	80027f8 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f838 	bl	8002860 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80027f6:	e01c      	b.n	8002832 <HAL_UART_IRQHandler+0x1e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f8:	46c0      	nop			; (mov r8, r8)
    return;
 80027fa:	e01a      	b.n	8002832 <HAL_UART_IRQHandler+0x1e6>
    return;
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	4013      	ands	r3, r2
 8002802:	d008      	beq.n	8002816 <HAL_UART_IRQHandler+0x1ca>
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	4013      	ands	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_UART_IRQHandler+0x1ca>
  {
    UART_Transmit_IT(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 fa85 	bl	8002d1e <UART_Transmit_IT>
    return;
 8002814:	e00e      	b.n	8002834 <HAL_UART_IRQHandler+0x1e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	4013      	ands	r3, r2
 800281c:	d00a      	beq.n	8002834 <HAL_UART_IRQHandler+0x1e8>
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2240      	movs	r2, #64	; 0x40
 8002822:	4013      	ands	r3, r2
 8002824:	d006      	beq.n	8002834 <HAL_UART_IRQHandler+0x1e8>
  {
    UART_EndTransmit_IT(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	0018      	movs	r0, r3
 800282a:	f000 facf 	bl	8002dcc <UART_EndTransmit_IT>
    return;
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	e000      	b.n	8002834 <HAL_UART_IRQHandler+0x1e8>
    return;
 8002832:	46c0      	nop			; (mov r8, r8)
  }

}
 8002834:	46bd      	mov	sp, r7
 8002836:	b006      	add	sp, #24
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	08002cf1 	.word	0x08002cf1

08002840 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b002      	add	sp, #8
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800287c:	2317      	movs	r3, #23
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2210      	movs	r2, #16
 8002882:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002884:	230a      	movs	r3, #10
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2200      	movs	r2, #0
 800288a:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 800288c:	2314      	movs	r3, #20
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2200      	movs	r2, #0
 8002892:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002894:	2313      	movs	r3, #19
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	4995      	ldr	r1, [pc, #596]	; (8002b14 <UART_SetConfig+0x2a4>)
 80028c0:	4011      	ands	r1, r2
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	6852      	ldr	r2, [r2, #4]
 80028d2:	4991      	ldr	r1, [pc, #580]	; (8002b18 <UART_SetConfig+0x2a8>)
 80028d4:	4011      	ands	r1, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	6892      	ldr	r2, [r2, #8]
 80028f4:	4989      	ldr	r1, [pc, #548]	; (8002b1c <UART_SetConfig+0x2ac>)
 80028f6:	4011      	ands	r1, r2
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028fe:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <UART_SetConfig+0x2b0>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	2203      	movs	r2, #3
 8002904:	4013      	ands	r3, r2
 8002906:	2b01      	cmp	r3, #1
 8002908:	d00f      	beq.n	800292a <UART_SetConfig+0xba>
 800290a:	d304      	bcc.n	8002916 <UART_SetConfig+0xa6>
 800290c:	2b02      	cmp	r3, #2
 800290e:	d011      	beq.n	8002934 <UART_SetConfig+0xc4>
 8002910:	2b03      	cmp	r3, #3
 8002912:	d005      	beq.n	8002920 <UART_SetConfig+0xb0>
 8002914:	e013      	b.n	800293e <UART_SetConfig+0xce>
 8002916:	2317      	movs	r3, #23
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e012      	b.n	8002946 <UART_SetConfig+0xd6>
 8002920:	2317      	movs	r3, #23
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e00d      	b.n	8002946 <UART_SetConfig+0xd6>
 800292a:	2317      	movs	r3, #23
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2204      	movs	r2, #4
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e008      	b.n	8002946 <UART_SetConfig+0xd6>
 8002934:	2317      	movs	r3, #23
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	2208      	movs	r2, #8
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e003      	b.n	8002946 <UART_SetConfig+0xd6>
 800293e:	2317      	movs	r3, #23
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	2210      	movs	r2, #16
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	46c0      	nop			; (mov r8, r8)
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	429a      	cmp	r2, r3
 8002952:	d000      	beq.n	8002956 <UART_SetConfig+0xe6>
 8002954:	e07b      	b.n	8002a4e <UART_SetConfig+0x1de>
  {
    switch (clocksource)
 8002956:	2317      	movs	r3, #23
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d01c      	beq.n	800299a <UART_SetConfig+0x12a>
 8002960:	dc02      	bgt.n	8002968 <UART_SetConfig+0xf8>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <UART_SetConfig+0x102>
 8002966:	e04f      	b.n	8002a08 <UART_SetConfig+0x198>
 8002968:	2b04      	cmp	r3, #4
 800296a:	d027      	beq.n	80029bc <UART_SetConfig+0x14c>
 800296c:	2b08      	cmp	r3, #8
 800296e:	d039      	beq.n	80029e4 <UART_SetConfig+0x174>
 8002970:	e04a      	b.n	8002a08 <UART_SetConfig+0x198>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002972:	f7ff f919 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002976:	0003      	movs	r3, r0
 8002978:	005a      	lsls	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	18d2      	adds	r2, r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	0019      	movs	r1, r3
 8002988:	0010      	movs	r0, r2
 800298a:	f7fd fbbd 	bl	8000108 <__udivsi3>
 800298e:	0003      	movs	r3, r0
 8002990:	001a      	movs	r2, r3
 8002992:	2314      	movs	r3, #20
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	801a      	strh	r2, [r3, #0]
        break;
 8002998:	e03b      	b.n	8002a12 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	4a60      	ldr	r2, [pc, #384]	; (8002b24 <UART_SetConfig+0x2b4>)
 80029a2:	189a      	adds	r2, r3, r2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	0019      	movs	r1, r3
 80029aa:	0010      	movs	r0, r2
 80029ac:	f7fd fbac 	bl	8000108 <__udivsi3>
 80029b0:	0003      	movs	r3, r0
 80029b2:	001a      	movs	r2, r3
 80029b4:	2314      	movs	r3, #20
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	801a      	strh	r2, [r3, #0]
        break;
 80029ba:	e02a      	b.n	8002a12 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029bc:	f7ff f888 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 80029c0:	0003      	movs	r3, r0
 80029c2:	005a      	lsls	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	18d2      	adds	r2, r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	0019      	movs	r1, r3
 80029d2:	0010      	movs	r0, r2
 80029d4:	f7fd fb98 	bl	8000108 <__udivsi3>
 80029d8:	0003      	movs	r3, r0
 80029da:	001a      	movs	r2, r3
 80029dc:	2314      	movs	r3, #20
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	801a      	strh	r2, [r3, #0]
        break;
 80029e2:	e016      	b.n	8002a12 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	085b      	lsrs	r3, r3, #1
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	189a      	adds	r2, r3, r2
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	0019      	movs	r1, r3
 80029f6:	0010      	movs	r0, r2
 80029f8:	f7fd fb86 	bl	8000108 <__udivsi3>
 80029fc:	0003      	movs	r3, r0
 80029fe:	001a      	movs	r2, r3
 8002a00:	2314      	movs	r3, #20
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	801a      	strh	r2, [r3, #0]
        break;
 8002a06:	e004      	b.n	8002a12 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a08:	2313      	movs	r3, #19
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
        break;
 8002a10:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002a12:	230a      	movs	r3, #10
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	2214      	movs	r2, #20
 8002a18:	18ba      	adds	r2, r7, r2
 8002a1a:	8812      	ldrh	r2, [r2, #0]
 8002a1c:	210f      	movs	r1, #15
 8002a1e:	438a      	bics	r2, r1
 8002a20:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a22:	2314      	movs	r3, #20
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	105b      	asrs	r3, r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b299      	uxth	r1, r3
 8002a32:	230a      	movs	r3, #10
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	220a      	movs	r2, #10
 8002a38:	18ba      	adds	r2, r7, r2
 8002a3a:	8812      	ldrh	r2, [r2, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	220a      	movs	r2, #10
 8002a46:	18ba      	adds	r2, r7, r2
 8002a48:	8812      	ldrh	r2, [r2, #0]
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	e05b      	b.n	8002b06 <UART_SetConfig+0x296>
  }
  else
  {
    switch (clocksource)
 8002a4e:	2317      	movs	r3, #23
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d01b      	beq.n	8002a90 <UART_SetConfig+0x220>
 8002a58:	dc02      	bgt.n	8002a60 <UART_SetConfig+0x1f0>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <UART_SetConfig+0x1fa>
 8002a5e:	e04d      	b.n	8002afc <UART_SetConfig+0x28c>
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d026      	beq.n	8002ab2 <UART_SetConfig+0x242>
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d037      	beq.n	8002ad8 <UART_SetConfig+0x268>
 8002a68:	e048      	b.n	8002afc <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681c      	ldr	r4, [r3, #0]
 8002a6e:	f7ff f89b 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002a72:	0002      	movs	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	18d2      	adds	r2, r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0019      	movs	r1, r3
 8002a82:	0010      	movs	r0, r2
 8002a84:	f7fd fb40 	bl	8000108 <__udivsi3>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	60e3      	str	r3, [r4, #12]
        break;
 8002a8e:	e03a      	b.n	8002b06 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681c      	ldr	r4, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <UART_SetConfig+0x2b8>)
 8002a9c:	189a      	adds	r2, r3, r2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	0010      	movs	r0, r2
 8002aa6:	f7fd fb2f 	bl	8000108 <__udivsi3>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	60e3      	str	r3, [r4, #12]
        break;
 8002ab0:	e029      	b.n	8002b06 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681c      	ldr	r4, [r3, #0]
 8002ab6:	f7ff f80b 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8002aba:	0002      	movs	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	18d2      	adds	r2, r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	0019      	movs	r1, r3
 8002aca:	0010      	movs	r0, r2
 8002acc:	f7fd fb1c 	bl	8000108 <__udivsi3>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	60e3      	str	r3, [r4, #12]
        break;
 8002ad6:	e016      	b.n	8002b06 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681c      	ldr	r4, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	0212      	lsls	r2, r2, #8
 8002ae6:	189a      	adds	r2, r3, r2
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0019      	movs	r1, r3
 8002aee:	0010      	movs	r0, r2
 8002af0:	f7fd fb0a 	bl	8000108 <__udivsi3>
 8002af4:	0003      	movs	r3, r0
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	60e3      	str	r3, [r4, #12]
        break;
 8002afa:	e004      	b.n	8002b06 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002afc:	2313      	movs	r3, #19
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
        break;
 8002b04:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002b06:	2313      	movs	r3, #19
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	781b      	ldrb	r3, [r3, #0]

}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b007      	add	sp, #28
 8002b12:	bd90      	pop	{r4, r7, pc}
 8002b14:	ffff69f3 	.word	0xffff69f3
 8002b18:	ffffcfff 	.word	0xffffcfff
 8002b1c:	fffff4ff 	.word	0xfffff4ff
 8002b20:	40021000 	.word	0x40021000
 8002b24:	00f42400 	.word	0x00f42400
 8002b28:	007a1200 	.word	0x007a1200

08002b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d00a      	beq.n	8002b54 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	6852      	ldr	r2, [r2, #4]
 8002b48:	4945      	ldr	r1, [pc, #276]	; (8002c60 <UART_AdvFeatureConfig+0x134>)
 8002b4a:	4011      	ands	r1, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b50:	430a      	orrs	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d00a      	beq.n	8002b74 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	6852      	ldr	r2, [r2, #4]
 8002b68:	493e      	ldr	r1, [pc, #248]	; (8002c64 <UART_AdvFeatureConfig+0x138>)
 8002b6a:	4011      	ands	r1, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b70:	430a      	orrs	r2, r1
 8002b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	2204      	movs	r2, #4
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d00a      	beq.n	8002b94 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	6852      	ldr	r2, [r2, #4]
 8002b88:	4937      	ldr	r1, [pc, #220]	; (8002c68 <UART_AdvFeatureConfig+0x13c>)
 8002b8a:	4011      	ands	r1, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2208      	movs	r2, #8
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d00a      	beq.n	8002bb4 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	6852      	ldr	r2, [r2, #4]
 8002ba8:	4930      	ldr	r1, [pc, #192]	; (8002c6c <UART_AdvFeatureConfig+0x140>)
 8002baa:	4011      	ands	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	2210      	movs	r2, #16
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d00a      	beq.n	8002bd4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	6892      	ldr	r2, [r2, #8]
 8002bc8:	4929      	ldr	r1, [pc, #164]	; (8002c70 <UART_AdvFeatureConfig+0x144>)
 8002bca:	4011      	ands	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2220      	movs	r2, #32
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d00a      	beq.n	8002bf4 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	4922      	ldr	r1, [pc, #136]	; (8002c74 <UART_AdvFeatureConfig+0x148>)
 8002bea:	4011      	ands	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2240      	movs	r2, #64	; 0x40
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d01b      	beq.n	8002c36 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	6852      	ldr	r2, [r2, #4]
 8002c08:	491b      	ldr	r1, [pc, #108]	; (8002c78 <UART_AdvFeatureConfig+0x14c>)
 8002c0a:	4011      	ands	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	035b      	lsls	r3, r3, #13
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d10a      	bne.n	8002c36 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	6852      	ldr	r2, [r2, #4]
 8002c2a:	4914      	ldr	r1, [pc, #80]	; (8002c7c <UART_AdvFeatureConfig+0x150>)
 8002c2c:	4011      	ands	r1, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d00a      	beq.n	8002c56 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	6852      	ldr	r2, [r2, #4]
 8002c4a:	490d      	ldr	r1, [pc, #52]	; (8002c80 <UART_AdvFeatureConfig+0x154>)
 8002c4c:	4011      	ands	r1, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
  }
}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b002      	add	sp, #8
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	fffdffff 	.word	0xfffdffff
 8002c64:	fffeffff 	.word	0xfffeffff
 8002c68:	fffbffff 	.word	0xfffbffff
 8002c6c:	ffff7fff 	.word	0xffff7fff
 8002c70:	ffffefff 	.word	0xffffefff
 8002c74:	ffffdfff 	.word	0xffffdfff
 8002c78:	ffefffff 	.word	0xffefffff
 8002c7c:	ff9fffff 	.word	0xff9fffff
 8002c80:	fff7ffff 	.word	0xfff7ffff

08002c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2269      	movs	r2, #105	; 0x69
 8002c96:	2120      	movs	r1, #32
 8002c98:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	226a      	movs	r2, #106	; 0x6a
 8002c9e:	2120      	movs	r1, #32
 8002ca0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2268      	movs	r2, #104	; 0x68
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	4909      	ldr	r1, [pc, #36]	; (8002cec <UART_EndRxTransfer+0x38>)
 8002cc8:	400a      	ands	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	6892      	ldr	r2, [r2, #8]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	438a      	bics	r2, r1
 8002cda:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	226a      	movs	r2, #106	; 0x6a
 8002ce0:	2120      	movs	r1, #32
 8002ce2:	5499      	strb	r1, [r3, r2]
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	fffffedf 	.word	0xfffffedf

08002cf0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	225a      	movs	r2, #90	; 0x5a
 8002d02:	2100      	movs	r1, #0
 8002d04:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2252      	movs	r2, #82	; 0x52
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff fda5 	bl	8002860 <HAL_UART_ErrorCallback>
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2269      	movs	r2, #105	; 0x69
 8002d2a:	5c9b      	ldrb	r3, [r3, r2]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b21      	cmp	r3, #33	; 0x21
 8002d30:	d147      	bne.n	8002dc2 <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2252      	movs	r2, #82	; 0x52
 8002d36:	5a9b      	ldrh	r3, [r3, r2]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d111      	bne.n	8002d62 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	438a      	bics	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e030      	b.n	8002dc4 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d114      	bne.n	8002d98 <UART_Transmit_IT+0x7a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d110      	bne.n	8002d98 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	8812      	ldrh	r2, [r2, #0]
 8002d84:	05d2      	lsls	r2, r2, #23
 8002d86:	0dd2      	lsrs	r2, r2, #23
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d96:	e009      	b.n	8002dac <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da0:	1c58      	adds	r0, r3, #1
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	64d0      	str	r0, [r2, #76]	; 0x4c
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	850b      	strh	r3, [r1, #40]	; 0x28
      }
      huart->TxXferCount--;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2252      	movs	r2, #82	; 0x52
 8002db0:	5a9b      	ldrh	r3, [r3, r2]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b299      	uxth	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2252      	movs	r2, #82	; 0x52
 8002dbc:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
  }
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	2140      	movs	r1, #64	; 0x40
 8002de0:	438a      	bics	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2269      	movs	r2, #105	; 0x69
 8002de8:	2120      	movs	r1, #32
 8002dea:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7ff fd26 	bl	8002840 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8002e08:	230e      	movs	r3, #14
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	215c      	movs	r1, #92	; 0x5c
 8002e10:	5a52      	ldrh	r2, [r2, r1]
 8002e12:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	226a      	movs	r2, #106	; 0x6a
 8002e18:	5c9b      	ldrb	r3, [r3, r2]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b22      	cmp	r3, #34	; 0x22
 8002e1e:	d15a      	bne.n	8002ed6 <UART_Receive_IT+0xd6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	230c      	movs	r3, #12
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002e2a:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	015b      	lsls	r3, r3, #5
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d116      	bne.n	8002e66 <UART_Receive_IT+0x66>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d112      	bne.n	8002e66 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8002e46:	230c      	movs	r3, #12
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	220e      	movs	r2, #14
 8002e4c:	18ba      	adds	r2, r7, r2
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	8812      	ldrh	r2, [r2, #0]
 8002e52:	4013      	ands	r3, r2
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	1c9a      	adds	r2, r3, #2
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54
 8002e64:	e00f      	b.n	8002e86 <UART_Receive_IT+0x86>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	1c59      	adds	r1, r3, #1
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6551      	str	r1, [r2, #84]	; 0x54
 8002e70:	220c      	movs	r2, #12
 8002e72:	18ba      	adds	r2, r7, r2
 8002e74:	8812      	ldrh	r2, [r2, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	210e      	movs	r1, #14
 8002e7a:	1879      	adds	r1, r7, r1
 8002e7c:	8809      	ldrh	r1, [r1, #0]
 8002e7e:	b2c9      	uxtb	r1, r1
 8002e80:	400a      	ands	r2, r1
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	225a      	movs	r2, #90	; 0x5a
 8002e8a:	5a9b      	ldrh	r3, [r3, r2]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	215a      	movs	r1, #90	; 0x5a
 8002e96:	1c18      	adds	r0, r3, #0
 8002e98:	5250      	strh	r0, [r2, r1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d119      	bne.n	8002ed2 <UART_Receive_IT+0xd2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4911      	ldr	r1, [pc, #68]	; (8002ef0 <UART_Receive_IT+0xf0>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	6892      	ldr	r2, [r2, #8]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	438a      	bics	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	226a      	movs	r2, #106	; 0x6a
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7ff fcc1 	bl	8002850 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e00a      	b.n	8002ee8 <UART_Receive_IT+0xe8>
    }

    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e008      	b.n	8002ee8 <UART_Receive_IT+0xe8>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	6992      	ldr	r2, [r2, #24]
 8002ee0:	2108      	movs	r1, #8
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
  }
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	fffffedf 	.word	0xfffffedf

08002ef4 <GPIO_Init>:

#include "gpio.h"


void GPIO_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <GPIO_Init+0xa0>)
 8002efc:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <GPIO_Init+0xa0>)
 8002efe:	6952      	ldr	r2, [r2, #20]
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	03c9      	lsls	r1, r1, #15
 8002f04:	430a      	orrs	r2, r1
 8002f06:	615a      	str	r2, [r3, #20]
 8002f08:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <GPIO_Init+0xa0>)
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	03db      	lsls	r3, r3, #15
 8002f10:	4013      	ands	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f16:	4b1f      	ldr	r3, [pc, #124]	; (8002f94 <GPIO_Init+0xa0>)
 8002f18:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <GPIO_Init+0xa0>)
 8002f1a:	6952      	ldr	r2, [r2, #20]
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	0289      	lsls	r1, r1, #10
 8002f20:	430a      	orrs	r2, r1
 8002f22:	615a      	str	r2, [r3, #20]
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <GPIO_Init+0xa0>)
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	029b      	lsls	r3, r3, #10
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <GPIO_Init+0xa0>)
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <GPIO_Init+0xa0>)
 8002f36:	6952      	ldr	r2, [r2, #20]
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	02c9      	lsls	r1, r1, #11
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	615a      	str	r2, [r3, #20]
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <GPIO_Init+0xa0>)
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	02db      	lsls	r3, r3, #11
 8002f48:	4013      	ands	r3, r2
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWRC_Pin|LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8002f4e:	2390      	movs	r3, #144	; 0x90
 8002f50:	05db      	lsls	r3, r3, #23
 8002f52:	2200      	movs	r2, #0
 8002f54:	21e2      	movs	r1, #226	; 0xe2
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fd fd76 	bl	8000a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWRC_Pin LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = PWRC_Pin|LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8002f5c:	230c      	movs	r3, #12
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	22e2      	movs	r2, #226	; 0xe2
 8002f62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	230c      	movs	r3, #12
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	2201      	movs	r2, #1
 8002f6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	230c      	movs	r3, #12
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7c:	230c      	movs	r3, #12
 8002f7e:	18fa      	adds	r2, r7, r3
 8002f80:	2390      	movs	r3, #144	; 0x90
 8002f82:	05db      	lsls	r3, r3, #23
 8002f84:	0011      	movs	r1, r2
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7fd fbea 	bl	8000760 <HAL_GPIO_Init>

}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b008      	add	sp, #32
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000

08002f98 <GPIO_LED_On>:

void GPIO_LED_On(uint8_t pin)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	1dfb      	adds	r3, r7, #7
 8002fa2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, LED_R_Pin | LED_G_Pin | LED_B_Pin, RESET);
 8002fa4:	2390      	movs	r3, #144	; 0x90
 8002fa6:	05db      	lsls	r3, r3, #23
 8002fa8:	2200      	movs	r2, #0
 8002faa:	21e0      	movs	r1, #224	; 0xe0
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7fd fd4b 	bl	8000a48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, pin, SET);
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b299      	uxth	r1, r3
 8002fb8:	2390      	movs	r3, #144	; 0x90
 8002fba:	05db      	lsls	r3, r3, #23
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7fd fd42 	bl	8000a48 <HAL_GPIO_WritePin>
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void I2C1_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002fd0:	4b20      	ldr	r3, [pc, #128]	; (8003054 <I2C1_Init+0x88>)
 8002fd2:	4a21      	ldr	r2, [pc, #132]	; (8003058 <I2C1_Init+0x8c>)
 8002fd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <I2C1_Init+0x88>)
 8002fd8:	4a20      	ldr	r2, [pc, #128]	; (800305c <I2C1_Init+0x90>)
 8002fda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <I2C1_Init+0x88>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <I2C1_Init+0x88>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <I2C1_Init+0x88>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fee:	4b19      	ldr	r3, [pc, #100]	; (8003054 <I2C1_Init+0x88>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ff4:	4b17      	ldr	r3, [pc, #92]	; (8003054 <I2C1_Init+0x88>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <I2C1_Init+0x88>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <I2C1_Init+0x88>)
 8003002:	2200      	movs	r2, #0
 8003004:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <I2C1_Init+0x88>)
 8003008:	0018      	movs	r0, r3
 800300a:	f7fd fd3b 	bl	8000a84 <HAL_I2C_Init>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d004      	beq.n	800301c <I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003012:	4b13      	ldr	r3, [pc, #76]	; (8003060 <I2C1_Init+0x94>)
 8003014:	211b      	movs	r1, #27
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f92c 	bl	8003274 <_Error_Handler>
  }

    /**Configure Analogue filter
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800301c:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <I2C1_Init+0x88>)
 800301e:	2100      	movs	r1, #0
 8003020:	0018      	movs	r0, r3
 8003022:	f7fe f8e1 	bl	80011e8 <HAL_I2CEx_ConfigAnalogFilter>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d004      	beq.n	8003034 <I2C1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <I2C1_Init+0x94>)
 800302c:	2122      	movs	r1, #34	; 0x22
 800302e:	0018      	movs	r0, r3
 8003030:	f000 f920 	bl	8003274 <_Error_Handler>
  }

    /**Configure Digital filter
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <I2C1_Init+0x88>)
 8003036:	2100      	movs	r1, #0
 8003038:	0018      	movs	r0, r3
 800303a:	f7fe f921 	bl	8001280 <HAL_I2CEx_ConfigDigitalFilter>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d004      	beq.n	800304c <I2C1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <I2C1_Init+0x94>)
 8003044:	2129      	movs	r1, #41	; 0x29
 8003046:	0018      	movs	r0, r3
 8003048:	f000 f914 	bl	8003274 <_Error_Handler>
  }

}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	20000028 	.word	0x20000028
 8003058:	40005400 	.word	0x40005400
 800305c:	20303e5d 	.word	0x20303e5d
 8003060:	08003b44 	.word	0x08003b44

08003064 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_I2C_MspInit+0x70>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d12a      	bne.n	80030cc <HAL_I2C_MspInit+0x68>

    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003076:	230c      	movs	r3, #12
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	22c0      	movs	r2, #192	; 0xc0
 800307c:	00d2      	lsls	r2, r2, #3
 800307e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003080:	230c      	movs	r3, #12
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2212      	movs	r2, #18
 8003086:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003088:	230c      	movs	r3, #12
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	2201      	movs	r2, #1
 800308e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003090:	230c      	movs	r3, #12
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2203      	movs	r2, #3
 8003096:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003098:	230c      	movs	r3, #12
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2204      	movs	r2, #4
 800309e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a0:	230c      	movs	r3, #12
 80030a2:	18fa      	adds	r2, r7, r3
 80030a4:	2390      	movs	r3, #144	; 0x90
 80030a6:	05db      	lsls	r3, r3, #23
 80030a8:	0011      	movs	r1, r2
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7fd fb58 	bl	8000760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_I2C_MspInit+0x74>)
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_I2C_MspInit+0x74>)
 80030b4:	69d2      	ldr	r2, [r2, #28]
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	0389      	lsls	r1, r1, #14
 80030ba:	430a      	orrs	r2, r1
 80030bc:	61da      	str	r2, [r3, #28]
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_I2C_MspInit+0x74>)
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	039b      	lsls	r3, r3, #14
 80030c6:	4013      	ands	r3, r2
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b008      	add	sp, #32
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40005400 	.word	0x40005400
 80030d8:	40021000 	.word	0x40021000

080030dc <I2C_WriteBytes>:

	return status;
}

HAL_StatusTypeDef I2C_WriteBytes(uint16_t addr, uint16_t reg, uint8_t *pData, uint16_t size)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b08b      	sub	sp, #44	; 0x2c
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	0004      	movs	r4, r0
 80030e4:	0008      	movs	r0, r1
 80030e6:	60ba      	str	r2, [r7, #8]
 80030e8:	0019      	movs	r1, r3
 80030ea:	230e      	movs	r3, #14
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	1c22      	adds	r2, r4, #0
 80030f0:	801a      	strh	r2, [r3, #0]
 80030f2:	230c      	movs	r3, #12
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	1c02      	adds	r2, r0, #0
 80030f8:	801a      	strh	r2, [r3, #0]
 80030fa:	1dbb      	adds	r3, r7, #6
 80030fc:	1c0a      	adds	r2, r1, #0
 80030fe:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, pData, size, I2C_TIMEOUT);
 8003100:	2317      	movs	r3, #23
 8003102:	18fc      	adds	r4, r7, r3
 8003104:	230c      	movs	r3, #12
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	881a      	ldrh	r2, [r3, #0]
 800310a:	230e      	movs	r3, #14
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	8819      	ldrh	r1, [r3, #0]
 8003110:	4809      	ldr	r0, [pc, #36]	; (8003138 <I2C_WriteBytes+0x5c>)
 8003112:	2364      	movs	r3, #100	; 0x64
 8003114:	9302      	str	r3, [sp, #8]
 8003116:	1dbb      	adds	r3, r7, #6
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2301      	movs	r3, #1
 8003122:	f7fd fd45 	bl	8000bb0 <HAL_I2C_Mem_Write>
 8003126:	0003      	movs	r3, r0
 8003128:	7023      	strb	r3, [r4, #0]

	return status;
 800312a:	2317      	movs	r3, #23
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	781b      	ldrb	r3, [r3, #0]
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b007      	add	sp, #28
 8003136:	bd90      	pop	{r4, r7, pc}
 8003138:	20000028 	.word	0x20000028

0800313c <main>:

uint8_t name[] = "AT+NAMEDMADMA\r\n";
uint8_t receive[100];

int main(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0

#ifdef TX
	HAL_Init();
 8003140:	f7fd f86e 	bl	8000220 <HAL_Init>
	SystemClock_Config();
 8003144:	f000 f81c 	bl	8003180 <SystemClock_Config>

	//SysTick->CTRL  &= ~SysTick_CTRL_ENABLE_Msk;

	GPIO_Init();
 8003148:	f7ff fed4 	bl	8002ef4 <GPIO_Init>
	I2C1_Init();
 800314c:	f7ff ff3e 	bl	8002fcc <I2C1_Init>

	USART1_UART_Init();
 8003150:	f000 fbb8 	bl	80038c4 <USART1_UART_Init>
	delay_ms(100);
 8003154:	2064      	movs	r0, #100	; 0x64
 8003156:	f000 f9bf 	bl	80034d8 <delay_ms>

	GPIO_LED_On(LED_B_Pin);
 800315a:	2080      	movs	r0, #128	; 0x80
 800315c:	f7ff ff1c 	bl	8002f98 <GPIO_LED_On>
	Si5351A_Init();
 8003160:	f000 f8f8 	bl	8003354 <Si5351A_Init>
	GPIO_LED_On(LED_G_Pin);
 8003164:	2040      	movs	r0, #64	; 0x40
 8003166:	f7ff ff17 	bl	8002f98 <GPIO_LED_On>

	delay_ms(100);
 800316a:	2064      	movs	r0, #100	; 0x64
 800316c:	f000 f9b4 	bl	80034d8 <delay_ms>

	TIM3_Init();
 8003170:	f000 fa08 	bl	8003584 <TIM3_Init>
	TIM14_Init();
 8003174:	f000 faa4 	bl	80036c0 <TIM14_Init>

	GPIO_LED_On(LED_R_Pin);
 8003178:	2020      	movs	r0, #32
 800317a:	f7ff ff0d 	bl	8002f98 <GPIO_LED_On>

	while (1)
 800317e:	e7fe      	b.n	800317e <main+0x42>

08003180 <SystemClock_Config>:
	}
#endif
}

void SystemClock_Config(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b094      	sub	sp, #80	; 0x50
 8003184:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003186:	2320      	movs	r3, #32
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2202      	movs	r2, #2
 800318c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800318e:	2320      	movs	r3, #32
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	2201      	movs	r2, #1
 8003194:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003196:	2320      	movs	r3, #32
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	2210      	movs	r2, #16
 800319c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800319e:	2320      	movs	r3, #32
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	2202      	movs	r2, #2
 80031a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031a6:	2320      	movs	r3, #32
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	2200      	movs	r2, #0
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24
  //RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80031ae:	2320      	movs	r3, #32
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	22c0      	movs	r2, #192	; 0xc0
 80031b4:	0352      	lsls	r2, r2, #13
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80031b8:	2320      	movs	r3, #32
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2200      	movs	r2, #0
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031c0:	2320      	movs	r3, #32
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fe f8a9 	bl	800131c <HAL_RCC_OscConfig>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d004      	beq.n	80031d8 <SystemClock_Config+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 80031ce:	4b28      	ldr	r3, [pc, #160]	; (8003270 <SystemClock_Config+0xf0>)
 80031d0:	2155      	movs	r1, #85	; 0x55
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 f84e 	bl	8003274 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031d8:	2310      	movs	r3, #16
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2207      	movs	r2, #7
 80031de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031e0:	2310      	movs	r3, #16
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	2202      	movs	r2, #2
 80031e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e8:	2310      	movs	r3, #16
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031f0:	2310      	movs	r3, #16
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031f8:	2310      	movs	r3, #16
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2101      	movs	r1, #1
 80031fe:	0018      	movs	r0, r3
 8003200:	f7fe fb80 	bl	8001904 <HAL_RCC_ClockConfig>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d004      	beq.n	8003212 <SystemClock_Config+0x92>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <SystemClock_Config+0xf0>)
 800320a:	2162      	movs	r1, #98	; 0x62
 800320c:	0018      	movs	r0, r3
 800320e:	f000 f831 	bl	8003274 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003212:	003b      	movs	r3, r7
 8003214:	2221      	movs	r2, #33	; 0x21
 8003216:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003218:	003b      	movs	r3, r7
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800321e:	003b      	movs	r3, r7
 8003220:	2210      	movs	r2, #16
 8003222:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003224:	003b      	movs	r3, r7
 8003226:	0018      	movs	r0, r3
 8003228:	f7fe fcd4 	bl	8001bd4 <HAL_RCCEx_PeriphCLKConfig>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d004      	beq.n	800323a <SystemClock_Config+0xba>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <SystemClock_Config+0xf0>)
 8003232:	216a      	movs	r1, #106	; 0x6a
 8003234:	0018      	movs	r0, r3
 8003236:	f000 f81d 	bl	8003274 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800323a:	f7fe fcab 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 800323e:	0002      	movs	r2, r0
 8003240:	23fa      	movs	r3, #250	; 0xfa
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	0010      	movs	r0, r2
 8003246:	f7fc ff5f 	bl	8000108 <__udivsi3>
 800324a:	0003      	movs	r3, r0
 800324c:	0018      	movs	r0, r3
 800324e:	f7fd f8fb 	bl	8000448 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003252:	2004      	movs	r0, #4
 8003254:	f7fd f906 	bl	8000464 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003258:	2301      	movs	r3, #1
 800325a:	425b      	negs	r3, r3
 800325c:	2200      	movs	r2, #0
 800325e:	2100      	movs	r1, #0
 8003260:	0018      	movs	r0, r3
 8003262:	f7fd f8cb 	bl	80003fc <HAL_NVIC_SetPriority>
}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	b014      	add	sp, #80	; 0x50
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	08003b54 	.word	0x08003b54

08003274 <_Error_Handler>:

void _Error_Handler(char *file, int line)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
	GPIO_LED_On(LED_R_Pin);
 800327e:	2020      	movs	r0, #32
 8003280:	f7ff fe8a 	bl	8002f98 <GPIO_LED_On>
	while(1)
 8003284:	e7fe      	b.n	8003284 <_Error_Handler+0x10>
	...

08003288 <HAL_MspInit>:
	{
	}
}

void HAL_MspInit(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328e:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_MspInit+0x6c>)
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_MspInit+0x6c>)
 8003292:	6992      	ldr	r2, [r2, #24]
 8003294:	2101      	movs	r1, #1
 8003296:	430a      	orrs	r2, r1
 8003298:	619a      	str	r2, [r3, #24]
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <HAL_MspInit+0x6c>)
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2201      	movs	r2, #1
 80032a0:	4013      	ands	r3, r2
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <HAL_MspInit+0x6c>)
 80032a8:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <HAL_MspInit+0x6c>)
 80032aa:	69d2      	ldr	r2, [r2, #28]
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	0549      	lsls	r1, r1, #21
 80032b0:	430a      	orrs	r2, r1
 80032b2:	61da      	str	r2, [r3, #28]
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_MspInit+0x6c>)
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	055b      	lsls	r3, r3, #21
 80032bc:	4013      	ands	r3, r2
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80032c2:	2305      	movs	r3, #5
 80032c4:	425b      	negs	r3, r3
 80032c6:	2200      	movs	r2, #0
 80032c8:	2100      	movs	r1, #0
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7fd f896 	bl	80003fc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80032d0:	2302      	movs	r3, #2
 80032d2:	425b      	negs	r3, r3
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	0018      	movs	r0, r3
 80032da:	f7fd f88f 	bl	80003fc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80032de:	2301      	movs	r3, #1
 80032e0:	425b      	negs	r3, r3
 80032e2:	2200      	movs	r2, #0
 80032e4:	2100      	movs	r1, #0
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7fd f888 	bl	80003fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000

080032f8 <Write_Si5351A>:
		_Error_Handler(__FILE__, __LINE__);
	}
}

void Write_Si5351A(uint16_t reg, uint8_t *pData, uint16_t size)
{
 80032f8:	b5b0      	push	{r4, r5, r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6039      	str	r1, [r7, #0]
 8003300:	0011      	movs	r1, r2
 8003302:	1dbb      	adds	r3, r7, #6
 8003304:	1c02      	adds	r2, r0, #0
 8003306:	801a      	strh	r2, [r3, #0]
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	1c0a      	adds	r2, r1, #0
 800330c:	801a      	strh	r2, [r3, #0]
	uint16_t addr= Si5351A_ADDRESS<<1;
 800330e:	230e      	movs	r3, #14
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	22c0      	movs	r2, #192	; 0xc0
 8003314:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;

	status = I2C_WriteBytes(addr, reg, pData, size);
 8003316:	230d      	movs	r3, #13
 8003318:	18fc      	adds	r4, r7, r3
 800331a:	1d3b      	adds	r3, r7, #4
 800331c:	881d      	ldrh	r5, [r3, #0]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	1dbb      	adds	r3, r7, #6
 8003322:	8819      	ldrh	r1, [r3, #0]
 8003324:	230e      	movs	r3, #14
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	8818      	ldrh	r0, [r3, #0]
 800332a:	002b      	movs	r3, r5
 800332c:	f7ff fed6 	bl	80030dc <I2C_WriteBytes>
 8003330:	0003      	movs	r3, r0
 8003332:	7023      	strb	r3, [r4, #0]

	if (status != HAL_OK)
 8003334:	230d      	movs	r3, #13
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <Write_Si5351A+0x50>
	{
		_Error_Handler(__FILE__, __LINE__);
 800333e:	4b04      	ldr	r3, [pc, #16]	; (8003350 <Write_Si5351A+0x58>)
 8003340:	214e      	movs	r1, #78	; 0x4e
 8003342:	0018      	movs	r0, r3
 8003344:	f7ff ff96 	bl	8003274 <_Error_Handler>
	}
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b004      	add	sp, #16
 800334e:	bdb0      	pop	{r4, r5, r7, pc}
 8003350:	08003b64 	.word	0x08003b64

08003354 <Si5351A_Init>:

Si5351A_StatusTypeDef Si5351A_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0

	uint8_t i;

	//step 1
	//Set CLKx_DIS high
	temp_data = 0;
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
	temp_reg = 24;
 8003360:	1dbb      	adds	r3, r7, #6
 8003362:	2218      	movs	r2, #24
 8003364:	801a      	strh	r2, [r3, #0]
	Write_Si5351A(temp_reg, &temp_data, 1);
 8003366:	1d39      	adds	r1, r7, #4
 8003368:	1dbb      	adds	r3, r7, #6
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	2201      	movs	r2, #1
 800336e:	0018      	movs	r0, r3
 8003370:	f7ff ffc2 	bl	80032f8 <Write_Si5351A>
	//Reg. 3 = 0xFF
	temp_data = 0xFF;
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	22ff      	movs	r2, #255	; 0xff
 8003378:	701a      	strb	r2, [r3, #0]
	temp_reg = 3;
 800337a:	1dbb      	adds	r3, r7, #6
 800337c:	2203      	movs	r2, #3
 800337e:	801a      	strh	r2, [r3, #0]
	Write_Si5351A(temp_reg, &temp_data, 1);
 8003380:	1d39      	adds	r1, r7, #4
 8003382:	1dbb      	adds	r3, r7, #6
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	2201      	movs	r2, #1
 8003388:	0018      	movs	r0, r3
 800338a:	f7ff ffb5 	bl	80032f8 <Write_Si5351A>

	//step2, Powerdown all output drivers, reg 16~23 = 0x80
	temp_reg = 15;
 800338e:	1dbb      	adds	r3, r7, #6
 8003390:	220f      	movs	r2, #15
 8003392:	801a      	strh	r2, [r3, #0]
	temp_data = 0x80;
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++)
 800339a:	1d7b      	adds	r3, r7, #5
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e010      	b.n	80033c4 <Si5351A_Init+0x70>
	{
		temp_reg++;
 80033a2:	1dbb      	adds	r3, r7, #6
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	1dbb      	adds	r3, r7, #6
 80033a8:	3201      	adds	r2, #1
 80033aa:	801a      	strh	r2, [r3, #0]
		Write_Si5351A(temp_reg, &temp_data, 1);
 80033ac:	1d39      	adds	r1, r7, #4
 80033ae:	1dbb      	adds	r3, r7, #6
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	2201      	movs	r2, #1
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7ff ff9f 	bl	80032f8 <Write_Si5351A>
	for (i = 0; i < 8; i++)
 80033ba:	1d7b      	adds	r3, r7, #5
 80033bc:	781a      	ldrb	r2, [r3, #0]
 80033be:	1d7b      	adds	r3, r7, #5
 80033c0:	3201      	adds	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	1d7b      	adds	r3, r7, #5
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b07      	cmp	r3, #7
 80033ca:	d9ea      	bls.n	80033a2 <Si5351A_Init+0x4e>
	}

	//step3, Si5351A does not have interrupt

	//step 4, config to 6.78Mhz output
	for (i = 0; i < SI5351A_REVB_REG_CONFIG_NUM_REGS; i++)
 80033cc:	1d7b      	adds	r3, r7, #5
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e01c      	b.n	800340e <Si5351A_Init+0xba>
	{
		temp_reg = si5351a_revb_registers[i][0];
 80033d4:	1d7b      	adds	r3, r7, #5
 80033d6:	7819      	ldrb	r1, [r3, #0]
 80033d8:	1dbb      	adds	r3, r7, #6
 80033da:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <Si5351A_Init+0x100>)
 80033dc:	0089      	lsls	r1, r1, #2
 80033de:	5a8a      	ldrh	r2, [r1, r2]
 80033e0:	801a      	strh	r2, [r3, #0]
		temp_data = si5351a_revb_registers[i][1];
 80033e2:	1d7b      	adds	r3, r7, #5
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <Si5351A_Init+0x100>)
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	18d3      	adds	r3, r2, r3
 80033ec:	3302      	adds	r3, #2
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	701a      	strb	r2, [r3, #0]
		Write_Si5351A(temp_reg, &temp_data, 1);
 80033f6:	1d39      	adds	r1, r7, #4
 80033f8:	1dbb      	adds	r3, r7, #6
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	2201      	movs	r2, #1
 80033fe:	0018      	movs	r0, r3
 8003400:	f7ff ff7a 	bl	80032f8 <Write_Si5351A>
	for (i = 0; i < SI5351A_REVB_REG_CONFIG_NUM_REGS; i++)
 8003404:	1d7b      	adds	r3, r7, #5
 8003406:	781a      	ldrb	r2, [r3, #0]
 8003408:	1d7b      	adds	r3, r7, #5
 800340a:	3201      	adds	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	1d7b      	adds	r3, r7, #5
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b28      	cmp	r3, #40	; 0x28
 8003414:	d9de      	bls.n	80033d4 <Si5351A_Init+0x80>
	}

	//step 5, Apply PLLA and PLLB soft reset
	temp_reg = 177;
 8003416:	1dbb      	adds	r3, r7, #6
 8003418:	22b1      	movs	r2, #177	; 0xb1
 800341a:	801a      	strh	r2, [r3, #0]
	temp_data= 0xAC;
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	22ac      	movs	r2, #172	; 0xac
 8003420:	701a      	strb	r2, [r3, #0]
	Write_Si5351A(temp_reg, &temp_data, 1);
 8003422:	1d39      	adds	r1, r7, #4
 8003424:	1dbb      	adds	r3, r7, #6
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	2201      	movs	r2, #1
 800342a:	0018      	movs	r0, r3
 800342c:	f7ff ff64 	bl	80032f8 <Write_Si5351A>

	//step 6, enable CLK0
	temp_reg = 3;
 8003430:	1dbb      	adds	r3, r7, #6
 8003432:	2203      	movs	r2, #3
 8003434:	801a      	strh	r2, [r3, #0]
	temp_data= 0xFE;
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	22fe      	movs	r2, #254	; 0xfe
 800343a:	701a      	strb	r2, [r3, #0]
	Write_Si5351A(temp_reg, &temp_data, 1);
 800343c:	1d39      	adds	r1, r7, #4
 800343e:	1dbb      	adds	r3, r7, #6
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	2201      	movs	r2, #1
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff ff57 	bl	80032f8 <Write_Si5351A>

	return Si5351A_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}
 8003454:	08003b98 	.word	0x08003b98

08003458 <NMI_Handler>:

volatile uint32_t ms_count = 0;


void NMI_Handler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	af00      	add	r7, sp, #0
  while (1)
 8003466:	e7fe      	b.n	8003466 <HardFault_Handler+0x4>

08003468 <SVC_Handler>:
  }

}

void SVC_Handler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	af00      	add	r7, sp, #0
}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
	ms_count--;
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SysTick_Handler+0x1c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	1e5a      	subs	r2, r3, #1
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <SysTick_Handler+0x1c>)
 8003488:	601a      	str	r2, [r3, #0]
	HAL_IncTick();
 800348a:	f7fc fef9 	bl	8000280 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800348e:	f7fd f803 	bl	8000498 <HAL_SYSTICK_IRQHandler>
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20000020 	.word	0x20000020

0800349c <DMA1_Channel2_3_IRQHandler>:

void DMA1_Channel2_3_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7fd f89e 	bl	80005e4 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <DMA1_Channel2_3_IRQHandler+0x20>)
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fd f89a 	bl	80005e4 <HAL_DMA_IRQHandler>
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	200000f4 	.word	0x200000f4
 80034bc:	20000138 	.word	0x20000138

080034c0 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <USART1_IRQHandler+0x14>)
 80034c6:	0018      	movs	r0, r3
 80034c8:	f7ff f8c0 	bl	800264c <HAL_UART_IRQHandler>
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	2000017c 	.word	0x2000017c

080034d8 <delay_ms>:

void delay_ms(uint32_t t)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	ms_count = t;
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <delay_ms+0x20>)
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	601a      	str	r2, [r3, #0]
	while (ms_count > 0);
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <delay_ms+0x20>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1fb      	bne.n	80034e8 <delay_ms+0x10>
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b002      	add	sp, #8
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000020 	.word	0x20000020

080034fc <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <SystemInit+0x70>)
 8003502:	4a1a      	ldr	r2, [pc, #104]	; (800356c <SystemInit+0x70>)
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	2101      	movs	r1, #1
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800350c:	4b17      	ldr	r3, [pc, #92]	; (800356c <SystemInit+0x70>)
 800350e:	4a17      	ldr	r2, [pc, #92]	; (800356c <SystemInit+0x70>)
 8003510:	6852      	ldr	r2, [r2, #4]
 8003512:	4917      	ldr	r1, [pc, #92]	; (8003570 <SystemInit+0x74>)
 8003514:	400a      	ands	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003518:	4b14      	ldr	r3, [pc, #80]	; (800356c <SystemInit+0x70>)
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <SystemInit+0x70>)
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	4915      	ldr	r1, [pc, #84]	; (8003574 <SystemInit+0x78>)
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <SystemInit+0x70>)
 8003526:	4a11      	ldr	r2, [pc, #68]	; (800356c <SystemInit+0x70>)
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	4913      	ldr	r1, [pc, #76]	; (8003578 <SystemInit+0x7c>)
 800352c:	400a      	ands	r2, r1
 800352e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <SystemInit+0x70>)
 8003532:	4a0e      	ldr	r2, [pc, #56]	; (800356c <SystemInit+0x70>)
 8003534:	6852      	ldr	r2, [r2, #4]
 8003536:	4911      	ldr	r1, [pc, #68]	; (800357c <SystemInit+0x80>)
 8003538:	400a      	ands	r2, r1
 800353a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <SystemInit+0x70>)
 800353e:	4a0b      	ldr	r2, [pc, #44]	; (800356c <SystemInit+0x70>)
 8003540:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003542:	210f      	movs	r1, #15
 8003544:	438a      	bics	r2, r1
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <SystemInit+0x70>)
 800354a:	4a08      	ldr	r2, [pc, #32]	; (800356c <SystemInit+0x70>)
 800354c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800354e:	490c      	ldr	r1, [pc, #48]	; (8003580 <SystemInit+0x84>)
 8003550:	400a      	ands	r2, r1
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <SystemInit+0x70>)
 8003556:	4a05      	ldr	r2, [pc, #20]	; (800356c <SystemInit+0x70>)
 8003558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800355a:	2101      	movs	r1, #1
 800355c:	438a      	bics	r2, r1
 800355e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003560:	4b02      	ldr	r3, [pc, #8]	; (800356c <SystemInit+0x70>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]

}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	08ffb80c 	.word	0x08ffb80c
 8003574:	fef6ffff 	.word	0xfef6ffff
 8003578:	fffbffff 	.word	0xfffbffff
 800357c:	ffc0ffff 	.word	0xffc0ffff
 8003580:	fffffeec 	.word	0xfffffeec

08003584 <TIM3_Init>:

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

void TIM3_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;

	htim3.Instance = TIM3;
 800358a:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <TIM3_Init+0x130>)
 800358c:	4a4a      	ldr	r2, [pc, #296]	; (80036b8 <TIM3_Init+0x134>)
 800358e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003590:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <TIM3_Init+0x130>)
 8003592:	2200      	movs	r2, #0
 8003594:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <TIM3_Init+0x130>)
 8003598:	2200      	movs	r2, #0
 800359a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 6;
 800359c:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <TIM3_Init+0x130>)
 800359e:	2206      	movs	r2, #6
 80035a0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a2:	4b44      	ldr	r3, [pc, #272]	; (80036b4 <TIM3_Init+0x130>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a8:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <TIM3_Init+0x130>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <TIM3_Init+0x130>)
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7fe fc09 	bl	8001dc8 <HAL_TIM_PWM_Init>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d004      	beq.n	80035c4 <TIM3_Init+0x40>
	{
	_Error_Handler(__FILE__, __LINE__);
 80035ba:	4b40      	ldr	r3, [pc, #256]	; (80036bc <TIM3_Init+0x138>)
 80035bc:	2115      	movs	r1, #21
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff fe58 	bl	8003274 <_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c4:	2320      	movs	r3, #32
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035cc:	2320      	movs	r3, #32
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035d4:	2320      	movs	r3, #32
 80035d6:	18fa      	adds	r2, r7, r3
 80035d8:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <TIM3_Init+0x130>)
 80035da:	0011      	movs	r1, r2
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fe ff9a 	bl	8002516 <HAL_TIMEx_MasterConfigSynchronization>
 80035e2:	1e03      	subs	r3, r0, #0
 80035e4:	d004      	beq.n	80035f0 <TIM3_Init+0x6c>
	{
	_Error_Handler(__FILE__, __LINE__);
 80035e6:	4b35      	ldr	r3, [pc, #212]	; (80036bc <TIM3_Init+0x138>)
 80035e8:	211c      	movs	r1, #28
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7ff fe42 	bl	8003274 <_Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2260      	movs	r2, #96	; 0x60
 80035f4:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 3;
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	2203      	movs	r2, #3
 80035fa:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	2202      	movs	r2, #2
 8003600:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003602:	1d3b      	adds	r3, r7, #4
 8003604:	2200      	movs	r2, #0
 8003606:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003608:	1d39      	adds	r1, r7, #4
 800360a:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <TIM3_Init+0x130>)
 800360c:	220c      	movs	r2, #12
 800360e:	0018      	movs	r0, r3
 8003610:	f7fe fc42 	bl	8001e98 <HAL_TIM_PWM_ConfigChannel>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d004      	beq.n	8003622 <TIM3_Init+0x9e>
	{
	_Error_Handler(__FILE__, __LINE__);
 8003618:	4b28      	ldr	r3, [pc, #160]	; (80036bc <TIM3_Init+0x138>)
 800361a:	2125      	movs	r1, #37	; 0x25
 800361c:	0018      	movs	r0, r3
 800361e:	f7ff fe29 	bl	8003274 <_Error_Handler>
	}

    HAL_TIM_MspPostInit(&htim3);
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <TIM3_Init+0x130>)
 8003624:	0018      	movs	r0, r3
 8003626:	f000 f8e1 	bl	80037ec <HAL_TIM_MspPostInit>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <TIM3_Init+0x130>)
 800362c:	210c      	movs	r1, #12
 800362e:	0018      	movs	r0, r3
 8003630:	f7fe fbf6 	bl	8001e20 <HAL_TIM_PWM_Start>


    //for h bridge
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	2260      	movs	r2, #96	; 0x60
 8003638:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 3;
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	2203      	movs	r2, #3
 800363e:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	2202      	movs	r2, #2
 8003644:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003646:	1d3b      	adds	r3, r7, #4
 8003648:	2204      	movs	r2, #4
 800364a:	611a      	str	r2, [r3, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800364c:	1d39      	adds	r1, r7, #4
 800364e:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <TIM3_Init+0x130>)
 8003650:	2200      	movs	r2, #0
 8003652:	0018      	movs	r0, r3
 8003654:	f7fe fc20 	bl	8001e98 <HAL_TIM_PWM_ConfigChannel>
 8003658:	1e03      	subs	r3, r0, #0
 800365a:	d004      	beq.n	8003666 <TIM3_Init+0xe2>
    {
    	_Error_Handler(__FILE__, __LINE__);
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <TIM3_Init+0x138>)
 800365e:	2134      	movs	r1, #52	; 0x34
 8003660:	0018      	movs	r0, r3
 8003662:	f7ff fe07 	bl	8003274 <_Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	2260      	movs	r2, #96	; 0x60
 800366a:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 3;
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	2203      	movs	r2, #3
 8003670:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	2204      	movs	r2, #4
 800367c:	611a      	str	r2, [r3, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800367e:	1d39      	adds	r1, r7, #4
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <TIM3_Init+0x130>)
 8003682:	2204      	movs	r2, #4
 8003684:	0018      	movs	r0, r3
 8003686:	f7fe fc07 	bl	8001e98 <HAL_TIM_PWM_ConfigChannel>
 800368a:	1e03      	subs	r3, r0, #0
 800368c:	d004      	beq.n	8003698 <TIM3_Init+0x114>
    {
        _Error_Handler(__FILE__, __LINE__);
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <TIM3_Init+0x138>)
 8003690:	213d      	movs	r1, #61	; 0x3d
 8003692:	0018      	movs	r0, r3
 8003694:	f7ff fdee 	bl	8003274 <_Error_Handler>
    }

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <TIM3_Init+0x130>)
 800369a:	2100      	movs	r1, #0
 800369c:	0018      	movs	r0, r3
 800369e:	f7fe fbbf 	bl	8001e20 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <TIM3_Init+0x130>)
 80036a4:	2104      	movs	r1, #4
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7fe fbba 	bl	8001e20 <HAL_TIM_PWM_Start>
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b00a      	add	sp, #40	; 0x28
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000074 	.word	0x20000074
 80036b8:	40000400 	.word	0x40000400
 80036bc:	08003b78 	.word	0x08003b78

080036c0 <TIM14_Init>:

void TIM14_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0

  TIM_OC_InitTypeDef sConfigOC;

  htim14.Instance = TIM14;
 80036c6:	4b27      	ldr	r3, [pc, #156]	; (8003764 <TIM14_Init+0xa4>)
 80036c8:	4a27      	ldr	r2, [pc, #156]	; (8003768 <TIM14_Init+0xa8>)
 80036ca:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80036cc:	4b25      	ldr	r3, [pc, #148]	; (8003764 <TIM14_Init+0xa4>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <TIM14_Init+0xa4>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4;
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <TIM14_Init+0xa4>)
 80036da:	2204      	movs	r2, #4
 80036dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <TIM14_Init+0xa4>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e4:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <TIM14_Init+0xa4>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80036ea:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <TIM14_Init+0xa4>)
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7fe fb3f 	bl	8001d70 <HAL_TIM_Base_Init>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d004      	beq.n	8003700 <TIM14_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <TIM14_Init+0xac>)
 80036f8:	2151      	movs	r1, #81	; 0x51
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7ff fdba 	bl	8003274 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8003700:	4b18      	ldr	r3, [pc, #96]	; (8003764 <TIM14_Init+0xa4>)
 8003702:	0018      	movs	r0, r3
 8003704:	f7fe fb60 	bl	8001dc8 <HAL_TIM_PWM_Init>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d004      	beq.n	8003716 <TIM14_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 800370c:	4b17      	ldr	r3, [pc, #92]	; (800376c <TIM14_Init+0xac>)
 800370e:	2156      	movs	r1, #86	; 0x56
 8003710:	0018      	movs	r0, r3
 8003712:	f7ff fdaf 	bl	8003274 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	2260      	movs	r2, #96	; 0x60
 800371a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2;
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	2202      	movs	r2, #2
 8003720:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	2204      	movs	r2, #4
 800372c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800372e:	1d39      	adds	r1, r7, #4
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <TIM14_Init+0xa4>)
 8003732:	2200      	movs	r2, #0
 8003734:	0018      	movs	r0, r3
 8003736:	f7fe fbaf 	bl	8001e98 <HAL_TIM_PWM_ConfigChannel>
 800373a:	1e03      	subs	r3, r0, #0
 800373c:	d004      	beq.n	8003748 <TIM14_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <TIM14_Init+0xac>)
 8003740:	215f      	movs	r1, #95	; 0x5f
 8003742:	0018      	movs	r0, r3
 8003744:	f7ff fd96 	bl	8003274 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim14);
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <TIM14_Init+0xa4>)
 800374a:	0018      	movs	r0, r3
 800374c:	f000 f84e 	bl	80037ec <HAL_TIM_MspPostInit>

  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <TIM14_Init+0xa4>)
 8003752:	2100      	movs	r1, #0
 8003754:	0018      	movs	r0, r3
 8003756:	f7fe fb63 	bl	8001e20 <HAL_TIM_PWM_Start>

}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b008      	add	sp, #32
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	200000b4 	.word	0x200000b4
 8003768:	40002000 	.word	0x40002000
 800376c:	08003b78 	.word	0x08003b78

08003770 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM3)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <HAL_TIM_PWM_MspInit+0x34>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10b      	bne.n	800379a <HAL_TIM_PWM_MspInit+0x2a>
  {
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_TIM_PWM_MspInit+0x38>)
 8003784:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <HAL_TIM_PWM_MspInit+0x38>)
 8003786:	69d2      	ldr	r2, [r2, #28]
 8003788:	2102      	movs	r1, #2
 800378a:	430a      	orrs	r2, r1
 800378c:	61da      	str	r2, [r3, #28]
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_TIM_PWM_MspInit+0x38>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	2202      	movs	r2, #2
 8003794:	4013      	ands	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
  }

}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b004      	add	sp, #16
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40021000 	.word	0x40021000

080037ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM14)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_TIM_Base_MspInit+0x38>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d10d      	bne.n	80037da <HAL_TIM_Base_MspInit+0x2e>
  {
    __HAL_RCC_TIM14_CLK_ENABLE();
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_TIM_Base_MspInit+0x3c>)
 80037c0:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <HAL_TIM_Base_MspInit+0x3c>)
 80037c2:	69d2      	ldr	r2, [r2, #28]
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	0049      	lsls	r1, r1, #1
 80037c8:	430a      	orrs	r2, r1
 80037ca:	61da      	str	r2, [r3, #28]
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_TIM_Base_MspInit+0x3c>)
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
  }

}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b004      	add	sp, #16
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	40002000 	.word	0x40002000
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2f      	ldr	r2, [pc, #188]	; (80038b8 <HAL_TIM_MspPostInit+0xcc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d137      	bne.n	800386e <HAL_TIM_MspPostInit+0x82>
  {
    GPIO_InitStruct.Pin = POWER_CONTROL_Pin;
 80037fe:	230c      	movs	r3, #12
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	2202      	movs	r2, #2
 8003804:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	230c      	movs	r3, #12
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2202      	movs	r2, #2
 800380c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	230c      	movs	r3, #12
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003816:	230c      	movs	r3, #12
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2200      	movs	r2, #0
 800381c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800381e:	230c      	movs	r3, #12
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	2201      	movs	r2, #1
 8003824:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(POWER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8003826:	230c      	movs	r3, #12
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	4a24      	ldr	r2, [pc, #144]	; (80038bc <HAL_TIM_MspPostInit+0xd0>)
 800382c:	0019      	movs	r1, r3
 800382e:	0010      	movs	r0, r2
 8003830:	f7fc ff96 	bl	8000760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003834:	230c      	movs	r3, #12
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	22c0      	movs	r2, #192	; 0xc0
 800383a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383c:	230c      	movs	r3, #12
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	2202      	movs	r2, #2
 8003842:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	230c      	movs	r3, #12
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800384c:	230c      	movs	r3, #12
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	2201      	movs	r2, #1
 8003852:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003854:	230c      	movs	r3, #12
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2201      	movs	r2, #1
 800385a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385c:	230c      	movs	r3, #12
 800385e:	18fa      	adds	r2, r7, r3
 8003860:	2390      	movs	r3, #144	; 0x90
 8003862:	05db      	lsls	r3, r3, #23
 8003864:	0011      	movs	r1, r2
 8003866:	0018      	movs	r0, r3
 8003868:	f7fc ff7a 	bl	8000760 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
    HAL_GPIO_Init(RF_CONTROL_GPIO_Port, &GPIO_InitStruct);
  }
}
 800386c:	e020      	b.n	80038b0 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM14)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <HAL_TIM_MspPostInit+0xd4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_MspPostInit+0xc4>
    GPIO_InitStruct.Pin = RF_CONTROL_Pin;
 8003878:	230c      	movs	r3, #12
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2210      	movs	r2, #16
 800387e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	230c      	movs	r3, #12
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2202      	movs	r2, #2
 8003886:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	230c      	movs	r3, #12
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003890:	230c      	movs	r3, #12
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	2201      	movs	r2, #1
 8003896:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8003898:	230c      	movs	r3, #12
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2204      	movs	r2, #4
 800389e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RF_CONTROL_GPIO_Port, &GPIO_InitStruct);
 80038a0:	230c      	movs	r3, #12
 80038a2:	18fa      	adds	r2, r7, r3
 80038a4:	2390      	movs	r3, #144	; 0x90
 80038a6:	05db      	lsls	r3, r3, #23
 80038a8:	0011      	movs	r1, r2
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7fc ff58 	bl	8000760 <HAL_GPIO_Init>
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b008      	add	sp, #32
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40000400 	.word	0x40000400
 80038bc:	48000400 	.word	0x48000400
 80038c0:	40002000 	.word	0x40002000

080038c4 <USART1_UART_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

void USART1_UART_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80038c8:	4b16      	ldr	r3, [pc, #88]	; (8003924 <USART1_UART_Init+0x60>)
 80038ca:	4a17      	ldr	r2, [pc, #92]	; (8003928 <USART1_UART_Init+0x64>)
 80038cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <USART1_UART_Init+0x60>)
 80038d0:	22e1      	movs	r2, #225	; 0xe1
 80038d2:	0252      	lsls	r2, r2, #9
 80038d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038d6:	4b13      	ldr	r3, [pc, #76]	; (8003924 <USART1_UART_Init+0x60>)
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038dc:	4b11      	ldr	r3, [pc, #68]	; (8003924 <USART1_UART_Init+0x60>)
 80038de:	2200      	movs	r2, #0
 80038e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <USART1_UART_Init+0x60>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <USART1_UART_Init+0x60>)
 80038ea:	220c      	movs	r2, #12
 80038ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <USART1_UART_Init+0x60>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <USART1_UART_Init+0x60>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <USART1_UART_Init+0x60>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <USART1_UART_Init+0x60>)
 8003902:	2200      	movs	r2, #0
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <USART1_UART_Init+0x60>)
 8003908:	0018      	movs	r0, r3
 800390a:	f7fe fe47 	bl	800259c <HAL_UART_Init>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d004      	beq.n	800391c <USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <USART1_UART_Init+0x68>)
 8003914:	2118      	movs	r1, #24
 8003916:	0018      	movs	r0, r3
 8003918:	f7ff fcac 	bl	8003274 <_Error_Handler>
  }

}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	2000017c 	.word	0x2000017c
 8003928:	40013800 	.word	0x40013800
 800392c:	08003b88 	.word	0x08003b88

08003930 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a45      	ldr	r2, [pc, #276]	; (8003a54 <HAL_UART_MspInit+0x124>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d000      	beq.n	8003944 <HAL_UART_MspInit+0x14>
 8003942:	e083      	b.n	8003a4c <HAL_UART_MspInit+0x11c>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003944:	4b44      	ldr	r3, [pc, #272]	; (8003a58 <HAL_UART_MspInit+0x128>)
 8003946:	4a44      	ldr	r2, [pc, #272]	; (8003a58 <HAL_UART_MspInit+0x128>)
 8003948:	6992      	ldr	r2, [r2, #24]
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	01c9      	lsls	r1, r1, #7
 800394e:	430a      	orrs	r2, r1
 8003950:	619a      	str	r2, [r3, #24]
 8003952:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <HAL_UART_MspInit+0x128>)
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	01db      	lsls	r3, r3, #7
 800395a:	4013      	ands	r3, r2
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]

    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003960:	230c      	movs	r3, #12
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	220c      	movs	r2, #12
 8003966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	230c      	movs	r3, #12
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2202      	movs	r2, #2
 800396e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	230c      	movs	r3, #12
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	2200      	movs	r2, #0
 8003976:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003978:	230c      	movs	r3, #12
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	2203      	movs	r2, #3
 800397e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003980:	230c      	movs	r3, #12
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	2201      	movs	r2, #1
 8003986:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003988:	230c      	movs	r3, #12
 800398a:	18fa      	adds	r2, r7, r3
 800398c:	2390      	movs	r3, #144	; 0x90
 800398e:	05db      	lsls	r3, r3, #23
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f7fc fee4 	bl	8000760 <HAL_GPIO_Init>

	/* USART1 DMA Init */
	/* USART1_RX Init */
	hdma_usart1_rx.Instance = DMA1_Channel3;
 8003998:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 800399a:	4a31      	ldr	r2, [pc, #196]	; (8003a60 <HAL_UART_MspInit+0x130>)
 800399c:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800399e:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	605a      	str	r2, [r3, #4]
	hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a4:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
	hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039aa:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	60da      	str	r2, [r3, #12]
	hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039b0:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	611a      	str	r2, [r3, #16]
	hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	615a      	str	r2, [r3, #20]
	hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80039bc:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
	hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039c2:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	61da      	str	r2, [r3, #28]
	if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 80039ca:	0018      	movs	r0, r3
 80039cc:	f7fc fd70 	bl	80004b0 <HAL_DMA_Init>
 80039d0:	1e03      	subs	r3, r0, #0
 80039d2:	d004      	beq.n	80039de <HAL_UART_MspInit+0xae>
	{
	  _Error_Handler(__FILE__, __LINE__);
 80039d4:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <HAL_UART_MspInit+0x134>)
 80039d6:	213e      	movs	r1, #62	; 0x3e
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff fc4b 	bl	8003274 <_Error_Handler>
	}

	__HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 80039e2:	665a      	str	r2, [r3, #100]	; 0x64
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <HAL_UART_MspInit+0x12c>)
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24

	/* USART1_TX Init */
	hdma_usart1_tx.Instance = DMA1_Channel2;
 80039ea:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <HAL_UART_MspInit+0x138>)
 80039ec:	4a1f      	ldr	r2, [pc, #124]	; (8003a6c <HAL_UART_MspInit+0x13c>)
 80039ee:	601a      	str	r2, [r3, #0]
	hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_UART_MspInit+0x138>)
 80039f2:	2210      	movs	r2, #16
 80039f4:	605a      	str	r2, [r3, #4]
	hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039f6:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <HAL_UART_MspInit+0x138>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
	hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039fc:	4b1a      	ldr	r3, [pc, #104]	; (8003a68 <HAL_UART_MspInit+0x138>)
 80039fe:	2280      	movs	r2, #128	; 0x80
 8003a00:	60da      	str	r2, [r3, #12]
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a02:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_UART_MspInit+0x138>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	611a      	str	r2, [r3, #16]
	hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a08:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <HAL_UART_MspInit+0x138>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	615a      	str	r2, [r3, #20]
	hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <HAL_UART_MspInit+0x138>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]
	hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <HAL_UART_MspInit+0x138>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
	if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <HAL_UART_MspInit+0x138>)
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7fc fd47 	bl	80004b0 <HAL_DMA_Init>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d004      	beq.n	8003a30 <HAL_UART_MspInit+0x100>
	{
	  _Error_Handler(__FILE__, __LINE__);
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_UART_MspInit+0x134>)
 8003a28:	214e      	movs	r1, #78	; 0x4e
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f7ff fc22 	bl	8003274 <_Error_Handler>
	}

	__HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0d      	ldr	r2, [pc, #52]	; (8003a68 <HAL_UART_MspInit+0x138>)
 8003a34:	661a      	str	r2, [r3, #96]	; 0x60
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <HAL_UART_MspInit+0x138>)
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2100      	movs	r1, #0
 8003a40:	201b      	movs	r0, #27
 8003a42:	f7fc fcdb 	bl	80003fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a46:	201b      	movs	r0, #27
 8003a48:	f7fc fcee 	bl	8000428 <HAL_NVIC_EnableIRQ>
  }

}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b008      	add	sp, #32
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40013800 	.word	0x40013800
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	20000138 	.word	0x20000138
 8003a60:	40020030 	.word	0x40020030
 8003a64:	08003b88 	.word	0x08003b88
 8003a68:	200000f4 	.word	0x200000f4
 8003a6c:	4002001c 	.word	0x4002001c

08003a70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a70:	480d      	ldr	r0, [pc, #52]	; (8003aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a74:	480d      	ldr	r0, [pc, #52]	; (8003aac <LoopForever+0x6>)
  ldr r1, =_edata
 8003a76:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a78:	4a0e      	ldr	r2, [pc, #56]	; (8003ab4 <LoopForever+0xe>)
  movs r3, #0
 8003a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a7c:	e002      	b.n	8003a84 <LoopCopyDataInit>

08003a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a82:	3304      	adds	r3, #4

08003a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a88:	d3f9      	bcc.n	8003a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a8a:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a8c:	4c0b      	ldr	r4, [pc, #44]	; (8003abc <LoopForever+0x16>)
  movs r3, #0
 8003a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a90:	e001      	b.n	8003a96 <LoopFillZerobss>

08003a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a94:	3204      	adds	r2, #4

08003a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a98:	d3fb      	bcc.n	8003a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003a9a:	f7ff fd2f 	bl	80034fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003a9e:	f000 f811 	bl	8003ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003aa2:	f7ff fb4b 	bl	800313c <main>

08003aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8003aa6:	e7fe      	b.n	8003aa6 <LoopForever>
  ldr   r0, =_estack
 8003aa8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8003ab4:	08003c5c 	.word	0x08003c5c
  ldr r2, =_sbss
 8003ab8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8003abc:	200001ec 	.word	0x200001ec

08003ac0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ac0:	e7fe      	b.n	8003ac0 <ADC1_IRQHandler>
	...

08003ac4 <__libc_init_array>:
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	4d0c      	ldr	r5, [pc, #48]	; (8003afc <__libc_init_array+0x38>)
 8003aca:	4c0d      	ldr	r4, [pc, #52]	; (8003b00 <__libc_init_array+0x3c>)
 8003acc:	1b64      	subs	r4, r4, r5
 8003ace:	10a4      	asrs	r4, r4, #2
 8003ad0:	42a6      	cmp	r6, r4
 8003ad2:	d109      	bne.n	8003ae8 <__libc_init_array+0x24>
 8003ad4:	2600      	movs	r6, #0
 8003ad6:	f000 f819 	bl	8003b0c <_init>
 8003ada:	4d0a      	ldr	r5, [pc, #40]	; (8003b04 <__libc_init_array+0x40>)
 8003adc:	4c0a      	ldr	r4, [pc, #40]	; (8003b08 <__libc_init_array+0x44>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	42a6      	cmp	r6, r4
 8003ae4:	d105      	bne.n	8003af2 <__libc_init_array+0x2e>
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}
 8003ae8:	00b3      	lsls	r3, r6, #2
 8003aea:	58eb      	ldr	r3, [r5, r3]
 8003aec:	4798      	blx	r3
 8003aee:	3601      	adds	r6, #1
 8003af0:	e7ee      	b.n	8003ad0 <__libc_init_array+0xc>
 8003af2:	00b3      	lsls	r3, r6, #2
 8003af4:	58eb      	ldr	r3, [r5, r3]
 8003af6:	4798      	blx	r3
 8003af8:	3601      	adds	r6, #1
 8003afa:	e7f2      	b.n	8003ae2 <__libc_init_array+0x1e>
 8003afc:	08003c54 	.word	0x08003c54
 8003b00:	08003c54 	.word	0x08003c54
 8003b04:	08003c54 	.word	0x08003c54
 8003b08:	08003c58 	.word	0x08003c58

08003b0c <_init>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr

08003b18 <_fini>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr
